#![allow(non_camel_case_types, non_snake_case)]
use super::common::*;
use super::ctu::*;
use super::encoder_context::*;
use super::picture_header::*;
use super::sps::*;
//use debug_print::*;
use lazy_static::lazy_static;
use std::iter::zip;

const LOW_FREQ_TRANS_MATRIX_16_0_1: [[i16; 16]; 16] = [
    [
        108, -44, -15, 1, -44, 19, 7, -1, -11, 6, 2, -1, 0, -1, -1, 0,
    ],
    [
        -40, -97, 56, 12, -11, 29, -12, -3, 18, 18, -15, -3, -1, -3, 2, 1,
    ],
    [
        25, -31, -1, 7, 100, -16, -29, 1, -54, 21, 14, -4, -7, 2, 4, 0,
    ],
    [
        -32, -39, -92, 51, -6, -16, 36, -8, 3, 22, 18, -15, 4, 1, -5, 2,
    ],
    [
        8, -9, 33, -8, -16, -102, 36, 23, -4, 38, -27, -5, 5, 16, -8, -6,
    ],
    [
        -25, 5, 16, -3, -38, 14, 11, -3, -97, 7, 26, 1, 55, -10, -19, 3,
    ],
    [
        8, 9, 16, 1, 37, 36, 94, -38, -7, 3, -47, 11, -6, -13, -17, 10,
    ],
    [
        2, 34, -5, 1, -7, 24, -25, -3, 8, 99, -28, -29, 6, -43, 21, 11,
    ],
    [
        -16, -27, -39, -109, 6, 10, 16, 24, 3, 19, 10, 24, -4, -7, -2, -3,
    ],
    [
        -9, -10, -34, 4, -9, -5, -29, 5, -33, -26, -96, 33, 14, 4, 39, -14,
    ],
    [
        -13, 1, 4, -9, -30, -17, -3, -64, -35, 11, 17, 19, -86, 6, 36, 14,
    ],
    [
        8, -7, -5, -15, 7, -30, -28, -87, 31, 4, 4, 33, 61, -5, -17, 22,
    ],
    [
        -2, 13, -6, -4, -2, 28, -13, -14, -3, 37, -15, -3, -2, 107, -36, -24,
    ],
    [4, 9, 11, 31, 4, 9, 16, 19, 12, 33, 32, 94, 12, 0, 34, -45],
    [2, -2, 8, -16, 8, 5, 28, -17, 6, -7, 18, -45, 40, 36, 97, -8],
    [
        0, -2, 0, -10, -1, -7, -3, -35, -1, -7, -2, -32, -6, -33, -16, -112,
    ],
];

const LOW_FREQ_TRANS_MATRIX_16_0_2: [[i16; 16]; 16] = [
    [119, -30, -22, -3, -23, -2, 3, 2, -16, 3, 6, 0, -3, 2, 1, 0],
    [
        -27, -101, 31, 17, -47, 2, 22, 3, 19, 30, -7, -9, 5, 3, -5, -1,
    ],
    [
        0, 58, 22, -15, -102, 2, 38, 2, 10, -13, -5, 4, 14, -1, -9, 0,
    ],
    [
        23, 4, 66, -11, 22, 89, -2, -26, 13, -8, -38, -1, -9, -20, -2, 8,
    ],
    [
        -19, -5, -89, 2, -26, 76, -11, -17, 20, 13, 18, -4, 1, -15, 3, 5,
    ],
    [
        -10, -1, -1, 6, 23, 25, 87, -7, -74, 4, 39, -5, 0, -1, -20, -1,
    ],
    [
        -17, -28, 12, -8, -32, 14, -53, -6, -68, -67, 17, 29, 2, 6, 25, 4,
    ],
    [
        1, -24, -23, 1, 17, -7, 52, 9, 50, -92, -15, 27, -15, -10, -6, 3,
    ],
    [
        -6, -17, -2, -111, 7, -17, 8, -42, 9, 18, 16, 25, -4, 2, -1, 11,
    ],
    [9, 5, 35, 0, 6, 21, -9, 34, 44, -3, 102, 11, -7, 13, 11, -20],
    [
        4, -5, -5, -10, 15, 19, -2, 6, 6, -12, -13, 6, 95, 69, -29, -24,
    ],
    [
        -6, -4, -9, -39, 1, 22, 0, 102, -19, 19, -32, 30, -16, -14, -8, -23,
    ],
    [4, -4, 7, 8, 4, -13, -18, 5, 0, 0, 21, 22, 58, -88, -54, 28],
    [
        -4, -7, 0, -24, -7, 0, -25, 3, -3, -30, 8, -76, -34, 4, -80, 26,
    ],
    [0, 6, 0, 30, -6, 1, -13, -23, 1, 20, -2, 80, -44, 37, -68, 1],
    [0, 0, -1, 5, -1, -7, 1, -34, -2, 3, -6, 19, 5, -38, 11, -115],
];

const LOW_FREQ_TRANS_MATRIX_16_1_1: [[i16; 16]; 16] = [
    [-111, 39, 4, 3, 44, 11, -12, -1, 7, -16, -5, 2, 3, -1, 4, 2],
    [
        -47, -27, 15, -1, -92, 43, 20, -2, 20, 39, -16, -5, 10, -5, -13, 2,
    ],
    [
        -35, -23, 4, 4, -17, -72, 32, 6, -59, 18, 50, -6, 0, 40, 0, -13,
    ],
    [
        13, 93, -27, -4, -48, 13, -34, 4, -52, 11, 1, 10, 3, 16, -3, 1,
    ],
    [
        -11, -27, 1, 2, -47, -4, -36, 10, -2, -85, 14, 29, -30, -2, 57, 4,
    ],
    [
        0, -35, 32, -2, 26, 60, -3, -17, -82, 1, -30, 0, -37, 21, 3, 12,
    ],
    [
        -17, -46, -92, 14, 7, -10, -39, 29, -17, 27, -28, 17, 1, -15, -13, 17,
    ],
    [
        4, -10, -23, 4, 16, 58, -17, 26, 30, 21, 67, 2, -13, 59, 13, -40,
    ],
    [
        5, -20, 32, -5, 8, -3, -46, -7, -4, 2, -15, 24, 100, 44, 0, 5,
    ],
    [
        -4, -1, 38, -18, -7, -42, -63, -6, 33, 34, -23, 15, -65, 33, -20, 2,
    ],
    [
        -2, -10, 35, -19, 5, 8, -44, 14, -25, 25, 58, 17, 7, -84, -16, -18,
    ],
    [
        5, 13, 18, 34, 11, -4, 18, 18, 5, 58, -3, 42, -2, -10, 85, 38,
    ],
    [
        -5, -7, -34, -83, 2, -1, -4, -73, 4, 20, 15, -12, 4, -3, 44, 12,
    ],
    [0, 4, -2, -60, 5, 9, 42, 34, 5, -14, 9, 80, -5, 13, -38, 37],
    [-1, 2, 7, -57, 3, -7, 9, 68, -9, 6, -49, -20, 6, -4, 36, -64],
    [
        -1, 0, -12, 23, 1, -4, 17, -53, -3, 4, -21, 72, -4, -8, -3, -83,
    ],
];

const LOW_FREQ_TRANS_MATRIX_16_1_2: [[i16; 16]; 16] = [
    [88, -55, 6, -3, -66, 27, 9, -2, 11, 11, -13, 1, -2, -7, 1, 2],
    [
        -58, -20, 27, -2, -27, 75, -29, 0, 47, -42, -11, 11, -9, -3, 19, -4,
    ],
    [
        -51, 23, -22, 5, -63, 3, 37, -5, 1, 64, -35, -4, 29, -31, -11, 13,
    ],
    [
        -27, -76, 49, -2, 40, 14, 9, -17, -56, 36, -25, 6, 14, 3, -6, 8,
    ],
    [
        19, -4, -36, 22, 52, 7, 36, -23, 28, -17, -64, 15, -5, -44, 48, 9,
    ],
    [
        29, 50, 13, -10, 1, 34, -59, 1, -51, 4, -16, 30, 52, -33, 24, -5,
    ],
    [
        -12, -21, -74, 43, -13, 39, 18, -5, -58, -35, 27, -5, 19, 26, 6, -5,
    ],
    [
        19, 38, -10, -5, 28, 66, 0, -5, -4, 19, -30, -26, -40, 28, -60, 37,
    ],
    [
        -6, 27, 18, -5, -37, -18, 12, -25, -44, -10, -38, 37, -66, 45, 40, -7,
    ],
    [
        -13, -28, -45, -39, 0, -5, -39, 69, -23, 16, -12, -18, -50, -31, 24, 13,
    ],
    [
        -1, 8, 24, -51, -15, -9, 44, 10, -28, -70, -12, -39, 24, -18, -4, 51,
    ],
    [
        -8, -22, -17, 33, -18, -45, -57, -27, 0, -31, -30, 29, -2, -13, -53, 49,
    ],
    [
        1, 12, 32, 51, -8, 8, -2, -31, -22, 4, 46, -39, -49, -67, 14, 17,
    ],
    [
        4, 5, 24, 60, -5, -14, -23, 38, 9, 8, -34, -59, 24, 47, 42, 28,
    ],
    [
        -1, -5, -20, -34, 4, 4, -15, -46, 18, 31, 42, 10, 10, 27, 49, 78,
    ],
    [
        -3, -7, -22, -34, -5, -11, -36, -69, -1, -3, -25, -73, 5, 4, 4, -49,
    ],
];

const LOW_FREQ_TRANS_MATRIX_16_2_1: [[i16; 16]; 16] = [
    [-112, 47, -2, 2, -34, 13, 2, 0, 15, -7, 1, 0, 8, -3, -1, 0],
    [29, -7, 1, -1, -108, 40, 2, 0, -45, 13, 4, -1, 8, -5, 1, 0],
    [
        -36, -87, 69, -10, -17, -33, 26, -2, 7, 14, -11, 2, 6, 8, -7, 0,
    ],
    [
        28, -5, 2, -2, -29, 13, -2, 0, 103, -37, -4, 1, 48, -16, -4, 1,
    ],
    [
        -12, -24, 15, -3, 26, 80, -61, 9, 15, 54, -36, 2, 0, -4, 6, -2,
    ],
    [
        18, 53, 69, -74, 14, 24, 28, -30, -6, -7, -11, 12, -5, -7, -6, 8,
    ],
    [5, -1, 2, 0, -26, 6, 0, 1, 45, -9, -1, 0, -113, 28, 8, -1],
    [
        -13, -32, 18, -2, 15, 34, -27, 7, -25, -80, 47, -1, -16, -50, 28, 2,
    ],
    [
        -4, -13, -10, 19, 18, 46, 60, -48, 16, 33, 60, -48, 1, 0, 5, -2,
    ],
    [
        15, 33, 63, 89, 8, 15, 25, 40, -4, -8, -15, -8, -2, -6, -9, -7,
    ],
    [
        -8, -24, -27, 15, 12, 41, 26, -29, -17, -50, -39, 27, 0, 35, -67, 26,
    ],
    [
        -2, -6, -24, 13, -1, -8, 37, -22, 3, 18, -51, 22, -23, -95, 17, 17,
    ],
    [-3, -7, -16, -21, 10, 24, 46, 75, 8, 20, 38, 72, 1, 2, 1, 7],
    [
        2, 6, 10, -3, -5, -16, -31, 12, 7, 24, 41, -16, -16, -41, -89, 49,
    ],
    [
        4, 8, 21, 40, -4, -11, -28, -57, 5, 14, 31, 70, 7, 18, 32, 52,
    ],
    [
        0, 1, 4, 11, -2, -4, -13, -34, 3, 7, 20, 47, -6, -19, -42, -101,
    ],
];

const LOW_FREQ_TRANS_MATRIX_16_2_2: [[i16; 16]; 16] = [
    [-99, 39, -1, 2, 65, -20, -5, 0, -15, -2, 5, -1, 0, 3, -1, 0],
    [
        58, 42, -33, 3, 33, -63, 23, -1, -55, 32, 3, -5, 21, -2, -8, 3,
    ],
    [
        -15, 71, -44, 5, -58, -29, 25, 3, 62, -7, -4, -4, -19, 4, 0, 1,
    ],
    [
        46, 5, 4, -6, 71, -12, -15, 5, 52, -38, 13, -2, -63, 23, 3, -3,
    ],
    [
        -14, -54, -29, 29, 25, -9, 61, -29, 27, 44, -48, 5, -27, -21, 12, 7,
    ],
    [
        -3, 3, 69, -42, -11, -50, -26, 26, 24, 63, -19, -5, -18, -22, 12, 0,
    ],
    [17, 16, -2, 1, 38, 18, -12, 0, 62, 1, -14, 5, 89, -42, 8, -2],
    [
        15, 54, -8, 6, 6, 60, -26, -8, -30, 17, -38, 22, -43, -45, 42, -7,
    ],
    [
        -6, -17, -55, -28, 9, 30, -8, 58, 4, 34, 41, -52, -16, -36, -20, 16,
    ],
    [
        -2, -1, -9, -79, 7, 11, 48, 44, -13, -34, -55, 6, 12, 23, 20, -11,
    ],
    [
        7, 29, 14, -6, 12, 53, 10, -11, 14, 59, -15, -3, 5, 71, -54, 13,
    ],
    [
        -5, -24, -53, 15, -3, -15, -61, 26, 6, 30, -16, 23, 13, 56, 44, -35,
    ],
    [
        4, 8, 21, 52, -1, -1, -5, 29, -7, -17, -44, -84, 8, 20, 31, 39,
    ],
    [
        -2, -11, -25, -4, -4, -21, -53, 2, -5, -26, -64, 19, -8, -19, -73, 39,
    ],
    [
        -3, -5, -23, -57, -2, -4, -24, -75, 1, 3, 9, -25, 6, 15, 41, 61,
    ],
    [1, 1, 7, 18, 1, 2, 16, 47, 2, 5, 24, 67, 3, 9, 25, 88],
];

const LOW_FREQ_TRANS_MATRIX_16_3_1: [[i16; 16]; 16] = [
    [
        -114, 37, 3, 2, -22, -23, 14, 0, 21, -17, -5, 2, 5, 2, -4, -1,
    ],
    [
        -19, -41, 19, -2, 85, -60, -11, 7, 17, 31, -34, 2, -11, 19, 2, -8,
    ],
    [
        36, -25, 18, -2, -42, -53, 35, 5, 46, -60, -25, 19, 8, 21, -33, -1,
    ],
    [
        -27, -80, 44, -3, -58, 1, -29, 19, -41, 18, -12, -7, 12, -17, 7, -6,
    ],
    [
        -11, -21, 37, -10, 44, -4, 47, -12, -37, -41, 58, 18, 10, -46, -16, 31,
    ],
    [
        15, 47, 10, -6, -16, -44, 42, 10, -80, 25, -40, 21, -23, -2, 3, -14,
    ],
    [
        13, 25, 79, -39, -13, 10, 31, -4, 49, 45, 12, -8, 3, -1, 43, 7,
    ],
    [
        16, 11, -26, 13, -13, -74, -20, -1, 5, -6, 29, -47, 26, -49, 54, 2,
    ],
    [
        -8, -34, -26, 7, -26, -19, 29, -37, 1, 22, 46, -9, -81, 37, 14, 20,
    ],
    [
        -6, -30, -42, -12, -3, 5, 57, -52, -2, 37, -12, 6, 74, 10, 6, -15,
    ],
    [
        5, 9, -6, 42, -15, -18, -9, 26, 15, 58, 14, 43, 23, -10, -37, 75,
    ],
    [
        -5, -23, -23, 36, 3, 22, 36, 40, 27, -4, -16, 56, -25, -46, 56, -24,
    ],
    [1, 3, 23, 73, 8, 5, 34, 46, -12, 2, 35, -38, 26, 52, 2, -31],
    [
        -3, -2, -21, -52, 1, -10, -17, 44, -19, -20, 30, 45, 27, 61, 49, 21,
    ],
    [
        -2, -7, -33, -56, -4, -6, 21, 63, 15, 31, 32, -22, -10, -26, -52, -38,
    ],
    [
        -5, -12, -18, -12, 8, 22, 38, 36, -5, -15, -51, -63, -5, 0, 15, 73,
    ],
];

const LOW_FREQ_TRANS_MATRIX_16_3_2: [[i16; 16]; 16] = [
    [-102, 22, 7, 2, 66, -25, -6, -1, -15, 14, 1, -1, 2, -2, 1, 0],
    [
        12, 93, -27, -6, -27, -64, 36, 6, 13, 5, -23, 0, -2, 6, 5, -3,
    ],
    [
        -59, -24, 17, 1, -62, -2, -3, 2, 83, -12, -17, -2, -24, 14, 7, -2,
    ],
    [
        -33, 23, -36, 11, -21, 50, 35, -16, -23, -78, 16, 19, 22, 15, -30, -5,
    ],
    [
        0, -38, -81, 30, 27, 5, 51, -32, 24, 36, -16, 12, -24, -8, 0, 1,
    ],
    [
        28, 38, 8, -9, 62, 32, -13, 2, 51, -32, 15, 5, -66, 28, 0, -1,
    ],
    [
        11, -35, 21, -17, 30, -18, 31, 18, -11, -36, -80, 12, 16, 49, 13, -32,
    ],
    [
        -13, 23, 22, -36, -12, 64, 39, 25, -19, 23, -36, 9, -30, -58, 33, -7,
    ],
    [
        -9, -20, -55, -83, 3, -2, 1, 62, 8, 2, 27, -28, 7, 15, -11, 5,
    ],
    [
        -6, 24, -38, 23, -8, 40, -49, 0, -7, 9, -25, -44, 23, 39, 70, -3,
    ],
    [
        12, 17, 17, 0, 32, 27, 21, 2, 67, 11, -6, -10, 89, -22, -12, 16,
    ],
    [
        2, -9, 8, 45, 7, -8, 27, 35, -9, -31, -17, -87, -23, -22, -19, 44,
    ],
    [
        -1, -9, 28, -24, -1, -10, 49, -30, -8, -7, 40, 1, 4, 33, 65, 67,
    ],
    [
        5, -12, -24, -17, 13, -34, -32, -16, 14, -67, -7, 9, 7, -74, 49, 1,
    ],
    [2, -6, 11, 45, 3, -10, 33, 55, 8, -5, 59, 4, 7, -4, 44, -66],
    [-1, 1, -14, 36, -1, 2, -20, 69, 0, 0, -15, 72, 3, 4, 5, 65],
];

const LOW_FREQ_TRANS_MATRIX_48_0_1: [[i16; 48]; 16] = [
    [
        -117, 28, 18, 2, 4, 1, 2, 1, 32, -18, -2, 0, -1, 0, 0, 0, 14, -1, -3, 0, -1, 0, 0, 0, 2, 0,
        0, 0, 0, 0, 0, 0, 3, 0, -1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    ],
    [
        -29, -91, 47, 1, 9, 0, 3, 0, -54, 26, -8, 3, 0, 1, 0, 0, 33, 5, -9, -1, -2, 0, -1, 0, -3,
        3, 0, 0, 0, 0, 0, 0, 7, 2, -2, 0, -1, 1, 0, 0, 2, 1, -1, 0, 0, 0, 0, 0,
    ],
    [
        -10, 62, -11, -8, -2, -2, -1, -1, -95, 3, 32, 0, 4, 0, 2, 0, 32, -30, -4, 4, -1, 1, 0, 0,
        6, 2, -5, 0, 0, 0, 0, 0, 6, -3, 0, 0, 2, 0, -1, 0, 2, -1, 0, 0, 1, 0, 0, 0,
    ],
    [
        -15, 15, -10, -2, 1, 0, 1, 0, 10, 112, -20, -17, -4, -4, -1, -2, -20, -26, 31, 1, 0, 0, 0,
        0, 2, -16, -1, 6, 0, 1, 0, 0, 1, -4, 0, 0, 0, -3, 0, 1, 0, -1, 0, 0, 0, -2, 0, 0,
    ],
    [
        32, 39, 92, -44, 4, -10, 1, -4, 26, 12, -15, 13, -5, 2, -2, 0, 29, -16, -22, 8, 0, 1, 0, 1,
        -20, 6, 4, -3, 1, 0, 0, 0, 1, -4, -3, 2, -4, 1, 0, 0, 1, -1, -2, 1, -2, 0, 0, 0,
    ],
    [
        -10, 1, 50, -15, 2, -3, 1, -1, -28, -15, 14, 6, 1, 1, 1, 0, -99, -4, 9, 5, 5, 2, 2, 1, 44,
        -10, -11, 1, -2, 0, -1, 0, -5, 4, -3, 0, 8, -1, -2, 0, -2, 1, -1, 0, 4, 0, -1, 0,
    ],
    [
        1, -33, -11, -14, 7, -2, 2, 0, 29, -12, 37, -7, -4, 0, -1, 0, 6, -99, 3, 26, -1, 5, 0, 2,
        14, 30, -27, -2, 1, -1, 0, -1, -6, 6, 6, -3, 1, 3, -3, 0, -1, 1, 1, 0, 0, 1, -1, 0,
    ],
    [
        0, 6, -6, 21, -4, 2, 0, 0, -20, -24, -104, 30, 5, 5, 1, 2, -7, -46, 10, -14, 7, 0, 1, 0, 9,
        21, 7, -6, -2, -1, 0, -1, 2, 2, 5, -2, 0, 3, 4, -1, 0, 0, 1, 0, 0, 1, 2, -1,
    ],
    [
        -13, -13, -37, -101, 29, -11, 8, -3, -12, -15, -20, 2, -11, 5, -2, 1, -12, 10, 26, 12, -6,
        0, -1, 0, -32, -2, 11, 3, 3, -1, 1, 0, 11, -5, -1, 6, -4, 2, 1, 0, 3, -1, 1, 2, -1, 0, 0,
        0,
    ],
    [
        6, 1, -14, -36, 9, -3, 2, 0, 10, 9, -18, -1, -3, 1, 0, 0, 38, 26, -13, -1, -5, -1, -1, 0,
        102, 3, -14, -1, -5, -1, -2, 0, -29, 10, 10, 0, 10, -4, -1, 1, -7, 1, 2, 1, 2, -1, 0, 0,
    ],
    [
        -12, -2, -26, -12, -9, 2, -1, 1, -3, 30, 4, 34, -4, 0, -1, 0, -30, 3, -92, 14, 19, 0, 3, 0,
        -11, 34, 21, -33, 1, -2, 0, -1, -9, -4, 18, 3, 2, 0, 0, -2, -1, -1, 3, 0, 0, 0, 0, -1,
    ],
    [
        0, -3, 0, -4, -15, 6, -3, 1, -7, -15, -28, -86, 19, -5, 4, -1, -5, -17, -41, 42, -6, 2, -1,
        1, -1, -40, 37, 13, -4, 2, -1, 1, -10, 13, -1, -4, 4, -4, 3, 4, -2, 2, -1, -1, 1, -1, 1, 2,
    ],
    [
        -1, 9, 13, 5, 14, -2, 2, -1, -8, 3, -4, -62, 4, 1, 1, 0, -12, 23, 16, -11, -17, 0, -1, 0,
        -11, 97, -3, -3, 0, -6, 0, -2, -21, -5, 23, 0, 2, -2, -1, 6, -3, -3, 1, 0, 0, 0, 0, 2,
    ],
    [
        6, 2, -3, 2, 10, -1, 2, 0, 8, 3, -1, -20, 0, 1, 0, 0, -4, 4, -16, 0, -2, 0, 1, 0, 34, 23,
        6, -7, -4, -2, -1, 0, 108, -5, -30, 6, -27, 10, 7, -2, 11, -3, -1, 1, -4, 1, 0, 1,
    ],
    [
        6, 9, -2, 35, 110, -22, 11, -4, -2, 0, -3, 1, -18, 12, -3, 2, -5, -4, -22, 8, -25, 3, 0, 0,
        -3, -21, 2, -3, 9, -2, 1, 0, -7, 1, 3, -5, 3, 0, -1, 0, 0, 1, 0, -1, 1, 0, 0, 0,
    ],
    [
        -1, 7, -2, 9, -11, 5, -1, 1, -7, 2, -22, 4, -13, 0, -1, 0, 0, 28, 0, 76, 4, -6, 0, -2, -13,
        5, -76, -4, 33, -1, 3, 0, 9, 18, -3, -35, -4, -1, 6, 1, 1, 2, 0, -3, -1, 0, 2, 0,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_0_2: [[i16; 48]; 16] = [
    [
        -108, 48, 9, 1, 1, 1, 0, 0, 44, -6, -9, -1, -1, 0, -1, 0, 9, -9, -1, 1, 0, 0, 0, 0, 3, -1,
        1, 0, 0, 0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0,
    ],
    [
        55, 66, -37, -5, -6, -1, -2, 0, 67, -30, -20, 4, -2, 0, -1, 0, -31, -19, 14, 4, 1, 1, 1, 0,
        -6, 3, 5, -2, 0, 0, 0, 0, -7, -1, 1, 0, -1, 1, 1, 0, -2, -1, 1, 0, 0, 0, 0, 0,
    ],
    [
        2, 86, -21, -13, -4, -2, -1, -1, -88, 5, 6, 4, 5, 1, 1, 0, 14, -5, 0, 3, 0, 0, 0, 0, 10,
        -5, -2, 0, -1, 0, 0, 0, 6, -5, 0, 1, 2, -1, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0,
    ],
    [
        -24, -21, -38, 19, 0, 4, -1, 2, -23, -89, 31, 20, 2, 3, 1, 1, -30, 26, 36, -8, -2, -2, 0,
        -1, 14, 18, -7, -9, -1, -1, 0, 0, 1, 3, -2, -1, 3, 2, -2, -1, 0, 1, 0, 0, 1, 1, -1, 0,
    ],
    [
        9, 20, 98, -26, -3, -5, 0, -2, -9, -26, 15, -16, 2, 0, 1, 0, -61, -3, -2, 3, 7, 1, 1, 0,
        12, 16, -6, -1, 0, -1, 0, 0, 2, 0, -8, 1, 3, 1, -1, 1, 0, -1, -2, 0, 1, 0, -1, 0,
    ],
    [
        -21, -7, -37, 10, 2, 2, -1, 1, -10, 69, -5, -7, -2, -2, 0, -1, -93, 2, 19, 0, 3, 0, 2, 0,
        17, 4, 0, 0, -1, 0, 0, 0, 5, -4, -2, 0, 4, -2, 0, 1, 0, 0, 0, 0, 2, -1, 0, 0,
    ],
    [
        -10, -25, 4, -17, 8, -2, 2, -1, -27, -17, -71, 25, 8, 2, 1, 1, -4, -66, 28, 36, -5, 3, 0,
        1, -10, 20, 33, -13, -8, 0, 0, -1, 3, 6, -3, -7, -1, 3, 3, -1, 1, 0, -1, 0, 0, 1, 1, -1,
    ],
    [
        2, 5, 10, 64, -9, 4, -3, 1, -4, 8, 62, 3, -17, 1, -2, 0, -3, -75, 5, -14, 1, 4, 0, 1, -36,
        3, 18, -4, 4, 0, 1, 0, 1, 14, -2, -8, -2, 1, -3, 0, 2, 2, -1, -2, 0, 1, -1, 0,
    ],
    [
        -11, -15, -28, -97, 6, -1, 4, -1, 7, 3, 57, -15, 10, -2, 0, -1, -1, -27, 13, 6, 1, -1, 0,
        0, -34, -6, 0, 3, 4, 1, 2, 0, -2, 8, 1, 5, -2, 0, -3, 1, 1, 1, 0, 2, -1, 0, -1, 0,
    ],
    [
        9, 13, 24, -6, 7, -2, 1, -1, 16, 39, 20, 47, -2, -2, -2, 0, 28, 23, 76, -5, -25, -3, -3,
        -1, 6, 36, -7, -39, -4, -1, 0, -1, 2, -4, -18, -3, -1, -1, -2, -2, 1, -2, -2, 0, 0, 0, -1,
        -1,
    ],
    [
        -7, 11, 12, 7, 2, -1, 0, -1, -14, -1, -24, 11, 2, 0, 0, 0, -20, 48, 11, -13, -5, -2, 0, -1,
        -105, -19, 17, 0, 6, 2, 3, 0, -14, 8, 8, 2, 1, 2, -1, -2, 3, 0, -1, 0, 0, 0, 0, 0,
    ],
    [
        0, 0, 7, -6, 23, -3, 3, -1, 5, 1, 18, 96, 13, -9, -1, -1, -21, -7, -42, 14, -24, -3, 0, 0,
        11, -47, -7, 3, -5, 9, 1, 2, 0, -1, 19, -1, 1, 0, -1, -6, -1, 1, 2, 0, 1, 0, 0, -2,
    ],
    [
        -2, -6, -1, -10, 0, 1, 1, 0, -7, -2, -28, 20, -15, 4, -3, 1, -2, -32, -2, -66, 3, 7, 1, 2,
        -11, 13, -70, 5, 43, -2, 3, 0, 8, -14, -3, 43, -1, 2, 7, -1, 1, -2, 1, 3, -1, 1, 1, 0,
    ],
    [
        -1, 6, -16, 0, 24, -3, 1, -1, 2, 6, 6, 16, 18, -7, 1, -1, -3, 11, -63, 9, 4, -5, 2, -1,
        -22, 94, -4, -6, -4, -4, 1, -2, 10, 23, -19, -5, 0, -6, -4, 6, 3, -2, 1, 1, 0, -1, 0, 0,
    ],
    [
        -5, -6, -3, -19, -104, 18, -4, 3, 0, 6, 0, 35, -41, 20, -2, 2, -2, 10, -18, 16, 21, 3, -2,
        0, -2, 11, 6, -10, 6, -3, -1, 0, -1, 5, -1, -6, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1,
    ],
    [
        -1, -2, 0, 23, -9, 0, -2, 0, 1, 1, 8, -1, 29, 1, 1, 0, 3, -6, 13, 76, 30, -11, -1, -2, -26,
        -8, -69, 7, -9, -7, 3, -1, -10, -34, -25, 13, -1, 0, 11, 5, 1, -1, 1, -2, 0, 0, 2, 0,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_1_1: [[i16; 48]; 16] = [
    [
        110, -49, -3, -4, -1, -1, 0, -1, -38, -1, 10, 0, 2, 0, 1, 0, -9, 13, 1, -2, 0, 0, 0, 0, -4,
        2, -3, 0, 0, 0, 0, 0, -2, 2, 0, 1, -1, 1, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0,
    ],
    [
        -43, -19, 17, -1, 3, 0, 1, 0, -98, 46, 14, -1, 2, 0, 1, 0, 26, 26, -15, -3, -2, -1, -1, 0,
        11, -7, -9, 2, 0, 0, 0, 0, 9, -3, -1, 2, 3, -3, 0, 0, 4, -1, 0, 0, 2, -1, 0, 0,
    ],
    [
        -19, 17, -7, 3, -2, 1, -1, 0, -32, -59, 29, 3, 4, 0, 2, 0, -72, 43, 34, -9, 3, -2, 1, -1,
        13, 36, -18, -10, 0, -2, 0, -1, 3, 0, -12, 3, 6, 1, -3, 2, 1, -1, -2, 0, 3, 1, -1, 1,
    ],
    [
        -35, -103, 39, 1, 7, 0, 2, 0, 38, -13, 25, -6, 1, -1, 0, 0, -1, 7, 6, -7, 1, -1, 0, 0, -13,
        14, 2, -4, 2, -1, 0, 0, -2, 11, -6, -2, -2, 4, -3, 0, 0, 3, -2, 0, -1, 1, -1, 0,
    ],
    [
        9, 5, -6, -1, -1, 0, -1, 0, 42, 4, 21, -11, 1, -3, 1, -1, 21, 70, -32, -21, 0, -4, -1, -1,
        34, -26, -57, 11, 4, 2, 0, 1, -4, -32, 5, 24, 1, -6, 12, 4, -3, -2, 4, -2, 0, -1, 0, 0,
    ],
    [
        -5, -5, -28, 9, -3, 2, -1, 1, -20, -78, 22, 16, 1, 3, 0, 1, 80, -6, 25, -5, -4, -1, -1, 0,
        6, -24, 7, -9, 0, 0, 0, 0, -7, 3, 13, -4, -3, 5, 1, -5, -2, 3, 1, -2, -1, 2, -1, -2,
    ],
    [
        14, 17, 27, -12, 1, -3, 1, -1, 8, 19, -13, 4, -2, 1, -1, 0, 48, -1, 48, -15, -4, -2, -1,
        -1, 1, 60, -28, -42, 5, -6, 1, -2, 11, -11, -51, 11, -2, 10, -2, 13, 2, -6, -4, 4, -2, -3,
        2, 2,
    ],
    [
        7, 35, 17, -4, -1, 0, 0, 0, 3, 8, 54, -17, 1, -2, 1, -1, 10, 14, -11, -34, 4, -4, 1, -1,
        -80, -7, -6, 2, 15, 0, 3, 0, -16, 46, 1, 3, 2, 7, -24, 0, 2, -2, -5, 8, 1, -1, -2, 2,
    ],
    [
        -13, -27, -101, 24, -8, 6, -3, 2, 11, 43, 6, 28, -6, 3, -1, 1, -3, 14, 21, -12, -7, -2, -1,
        -1, -23, 10, -4, -12, 3, 0, 1, 0, 2, 9, -10, 0, 1, -5, -4, 4, 2, -2, 2, 2, 0, -2, 1, 0,
    ],
    [
        -11, -13, -3, -10, 3, -1, 1, 0, -19, -19, -37, 8, 4, 2, 0, 1, -12, -30, 3, -9, 5, 0, 1, 0,
        -56, -9, -47, 8, 21, 1, 4, 1, -11, -30, 10, 59, -2, 8, 41, 8, 2, 5, 6, -7, -1, 3, 5, -2,
    ],
    [
        -4, -10, -24, -11, 3, -2, 0, -1, -6, -37, -45, -17, 8, -2, 2, -1, 17, 14, -58, 14, 15, 0,
        2, 0, -10, 34, -7, 28, 4, -1, 1, 0, 23, 34, -31, 4, 10, -22, -30, 22, 4, -15, 9, 20, 2, -5,
        9, 4,
    ],
    [
        -2, 1, 13, -17, 3, -5, 1, -2, 3, 0, -55, 22, 6, 1, 1, 0, 8, 74, 21, 40, -14, 0, -2, 0, -36,
        -8, 11, -13, -23, 1, -3, 0, -36, 6, 16, -14, 2, 19, -4, -12, -1, 0, -7, -3, 0, 2, -2, -1,
    ],
    [
        3, 1, 5, -15, 1, -2, 1, -1, 7, 4, -7, 29, -1, 2, -1, 1, 8, 3, 12, -14, -9, -1, -1, 0, 4,
        29, -15, 31, 10, 4, 1, 1, 61, 22, 55, 14, 13, 3, -9, -65, 1, -11, -21, -7, 0, 0, -1, 3,
    ],
    [
        -4, -8, -1, -50, 6, -4, 2, -2, -1, 5, -22, 20, 6, 1, 0, 0, -16, -15, 18, -29, -11, 2, -2,
        1, 40, -45, -19, -22, 31, 2, 4, 1, -25, 41, 0, 12, 9, 7, -42, 12, -3, -14, 2, 28, 5, 1, 6,
        2,
    ],
    [
        5, -1, 26, 102, -13, 12, -4, 4, -4, -2, -40, -7, -23, 3, -5, 1, -1, 5, 8, -23, 7, 2, 1, 1,
        10, -11, -13, -3, 12, -3, 2, 0, -9, 23, 4, 9, 14, 9, -14, -4, 0, -12, -7, 6, 3, 0, 6, 3,
    ],
    [
        -5, -6, -27, -22, -12, 0, -3, 0, -5, 8, -20, -83, 0, 0, 0, 0, 9, 7, 24, -20, 41, 3, 6, 1,
        15, 20, 12, 11, 17, -9, 1, -2, -26, -1, 18, -1, -12, 32, 3, -18, -5, 10, -25, -5, -2, 1,
        -8, 10,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_1_2: [[i16; 48]; 16] = [
    [
        80, -49, 6, -4, 1, -1, 1, -1, -72, 36, 4, 0, 1, 0, 0, 0, 26, 0, -12, 2, -2, 1, -1, 0, -7,
        -9, 6, 1, 0, 0, 0, 0, 3, 5, -1, -2, -2, -2, -1, 1, 1, 1, 0, 0, -1, -1, 0, 0,
    ],
    [
        -72, -6, 17, 0, 3, 0, 1, 0, -23, 58, -21, 2, -3, 1, -1, 0, 55, -46, -1, 6, -2, 1, -1, 0,
        -22, 7, 17, -7, 2, -1, 1, 0, 9, 5, -12, 1, -3, -4, 4, 2, 4, 1, -2, -1, -1, -1, 1, 0,
    ],
    [
        -50, 19, -15, 4, -1, 1, -1, 1, -58, -2, 30, -3, 4, -1, 2, 0, 6, 57, -34, 0, -2, 0, -1, 0,
        34, -48, -2, 14, -4, 3, -1, 1, -10, 7, 21, -10, 6, 1, -11, 0, -1, -1, 4, 2, 3, 0, -2, -1,
    ],
    [
        -33, -43, 28, -7, 4, -2, 2, -1, -38, 11, -8, 4, 1, 1, 0, 0, -55, 24, 26, -5, 2, -1, 1, 0,
        15, 46, -40, -1, -1, 0, -1, 0, 17, -38, 1, 17, -3, 11, 15, -11, 3, -1, -10, 1, 0, 1, 3, 2,
    ],
    [
        10, 66, -21, -3, -3, 0, -1, 0, -53, -41, -2, 16, -1, 4, -1, 1, 36, -5, 41, -20, 3, -3, 1,
        -1, -30, 26, -32, -3, 7, -2, 2, -1, 15, -8, 1, 17, -1, -2, 4, -8, 2, 0, -1, 3, 0, 0, 0, -1,
    ],
    [
        18, 14, 13, -9, 2, -2, 1, -1, 34, 32, -31, 12, -5, 2, -2, 1, 40, 4, -4, -9, -3, -2, -1, -1,
        27, -31, -43, 19, -2, 3, -1, 1, 7, -49, 52, 10, -11, 22, 7, -26, -1, -6, -9, 6, -2, 2, 4,
        -2,
    ],
    [
        21, 66, -1, 9, -4, 2, -1, 1, -21, 41, -30, -10, 0, -2, 0, -1, -35, -17, -3, 26, -6, 5, -2,
        2, 56, 3, 18, -25, -1, -2, -1, -1, -15, -13, -27, 9, 9, -6, 20, 5, -3, 2, -6, -9, 3, -3, 1,
        5,
    ],
    [
        1, -6, -24, 17, -5, 3, -2, 1, 24, 10, 39, -21, 5, -4, 2, -1, 33, 32, -30, 4, -3, -1, -1, 0,
        -4, 13, -16, -10, 0, -1, 0, 0, 24, -26, -37, 33, 5, -32, 55, -5, -7, 22, -14, -22, 1, -9,
        -3, 13,
    ],
    [
        9, 33, -24, 1, 4, 0, 1, 0, 6, 50, 26, 1, -10, 0, -2, 0, -27, 1, -28, -21, 16, -5, 3, -2,
        -23, 36, -2, 40, -17, 4, -3, 1, 43, -13, 4, -41, -19, -2, -24, 17, 11, -4, 8, 4, -3, -3,
        -3, -3,
    ],
    [
        -7, -9, -32, 14, -3, 3, -1, 1, -23, -28, 0, -5, -1, 0, 0, 0, -36, -59, -24, 14, 4, 2, 1, 1,
        -23, -26, 23, 26, -3, 5, 0, 2, 10, -26, 38, 7, -12, 11, 42, -22, -5, 20, -14, -15, -1, -2,
        1, 6,
    ],
    [
        6, 30, 69, -18, 5, -4, 3, -1, -3, -11, -34, -16, 9, -4, 2, -1, -16, 35, -35, 30, -9, 3, -2,
        1, -57, -13, 6, 4, -5, 5, -1, 1, 28, 10, 4, 7, 0, -15, 7, -10, -1, 7, -2, 2, 1, -3, 0, 0,
    ],
    [
        1, -8, 24, -3, 7, -2, 2, -1, -6, -51, -6, -4, -5, 0, -1, 0, 38, -1, 0, 25, 6, 2, 1, 1, 47,
        20, 35, 1, -27, 1, -5, 0, 37, -37, -9, -47, -28, 5, 0, 18, 8, 6, 0, -8, -4, -3, -3, 1,
    ],
    [
        4, 10, 4, 17, -9, 4, -2, 1, 5, 14, 32, -15, 9, -3, 2, -1, 7, 13, 19, 15, -8, 1, -1, 0, 3,
        25, 30, -18, 1, -2, 0, -1, 11, 24, 22, -11, -3, 37, -13, -58, -5, 12, -63, 26, 9, -15, 11,
        8,
    ],
    [
        -3, -9, -23, 10, -10, 3, -3, 1, -5, -14, -16, -27, 13, -5, 2, -1, -1, -13, -30, 11, -5, 2,
        -1, 0, -5, -8, -22, -16, 10, 0, 1, 0, 0, -29, -27, 6, -27, -10, -30, 9, -3, -10, -7, 77, 9,
        -13, 45, -8,
    ],
    [
        2, 11, 22, 2, 9, -2, 2, 0, -6, -7, 20, -32, -3, -4, 0, -1, 13, -5, -28, 6, 18, -4, 3, -1,
        -26, 27, -14, 6, -20, 0, -2, 0, -76, -26, -4, -7, 12, 51, 5, 24, 7, -17, -16, -12, -5, 4,
        2, 13,
    ],
    [
        2, -3, 8, 14, -5, 3, -1, 1, -2, -11, 5, -18, 8, -3, 2, -1, 12, -23, -19, 22, 2, 0, 1, 0,
        23, 41, -7, 35, -10, 4, -1, 1, 5, 7, 23, 5, 69, -38, -8, -32, -15, -31, 24, 11, 2, 18, 11,
        -15,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_2_1: [[i16; 48]; 16] = [
    [
        -121, 33, 4, 4, 1, 2, 0, 1, -1, -1, 1, 0, 0, 0, 0, 0, 24, -5, -1, -1, 0, 0, 0, 0, 5, -1, 0,
        0, 0, 0, 0, 0, 3, -1, 0, 0, 2, -1, 0, 0, 2, -1, 0, 0, 1, 0, 0, 0,
    ],
    [
        0, -2, 0, 0, 0, 0, 0, 0, 121, -23, -7, -3, -2, -1, -1, 0, 17, 1, -2, 0, 0, 0, 0, 0, -27, 4,
        2, 0, 0, 0, 0, 0, -12, 2, 1, 0, -5, 1, 0, 0, -1, 0, 0, 0, -2, 0, 0, 0,
    ],
    [
        -20, 19, -5, 2, -1, 1, 0, 0, 16, 3, -2, 0, 0, 0, 0, 0, -120, 14, 8, 1, 3, 1, 1, 0, -18, -2,
        3, 0, 1, 0, 0, 0, 17, -3, -1, 0, 6, -1, -1, 0, 2, 0, 0, 0, 2, 0, 0, 0,
    ],
    [
        32, 108, -43, 10, -9, 3, -3, 1, 4, 19, -7, 1, -1, 0, 0, 0, 11, -30, 9, -2, 1, -1, 0, 0, 0,
        -8, 2, 0, 0, 0, 0, 0, -7, -1, 2, 0, -3, -1, 1, 0, -2, -2, 1, 0, 0, 0, 0, 0,
    ],
    [
        -3, 0, -1, 0, 0, 0, 0, 0, -29, 11, -2, 1, 0, 0, 0, 0, 12, 7, -1, 0, 0, 0, 0, 0, -117, 12,
        9, 1, 3, 0, 1, 0, -32, -3, 3, 0, 12, -2, -1, 0, 7, 0, 0, 0, 1, 0, 0, 0,
    ],
    [
        -4, -12, -3, 1, -1, 0, 0, 0, 19, 105, -31, 7, -6, 1, -2, 0, 9, 46, -6, 0, 0, 0, 0, 0, 8,
        -29, 9, -3, 1, 0, 0, 0, -3, -19, 3, 0, -4, -6, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0,
    ],
    [
        7, 1, 2, 0, 0, 0, 0, 0, 4, 3, -2, 0, 0, 0, 0, 0, 22, -8, 1, -1, 0, 0, 0, 0, -28, -9, 4, 0,
        1, 0, 0, 0, 117, -10, -8, 0, 32, 1, -4, 0, 3, 1, -1, 0, -3, 1, 0, 0,
    ],
    [
        -8, -31, 14, -4, 3, -1, 1, 0, 9, 43, 0, 1, -1, 0, 0, 0, -13, -105, 17, -2, 2, 0, 0, 0, -8,
        -25, -3, 0, 0, 0, 0, 0, -7, 32, -5, 1, -1, 4, 0, 0, 2, -1, 0, 0, 1, 0, -1, 0,
    ],
    [
        -15, -43, -100, 23, -12, 6, -4, 2, -6, -17, -48, 10, -5, 2, -1, 1, 1, -5, 19, -6, 3, -1, 1,
        0, 2, 7, 15, -3, 1, -1, 0, 0, 4, 10, 5, -1, 0, 3, 1, 0, -2, 1, 2, 0, -1, 1, 1, 0,
    ],
    [
        -3, 1, 2, 0, 0, 0, 0, 0, -6, 3, 1, 0, 0, 0, 0, 0, 0, 3, -2, 0, 0, 0, 0, 0, -20, 8, -2, 0,
        0, 0, 0, 0, 30, 13, -3, 0, -116, 6, 10, 0, -35, -5, 4, 0, -3, -1, 0, 0,
    ],
    [
        -1, -6, -3, 2, -1, 0, 0, 0, -6, -35, 9, 0, 2, 0, 0, 0, 1, -6, 11, -2, 2, 0, 1, 0, -9, -100,
        17, -1, 1, 0, 0, 0, -10, -63, 1, 2, -17, 3, -4, 0, -1, 9, -1, 0, 3, 4, -1, 0,
    ],
    [
        -5, -14, -48, 2, -5, 1, -2, 0, 10, 24, 99, -17, 10, -4, 3, -1, 4, 14, 32, 0, 2, 0, 1, 0,
        -4, 0, -39, 6, -4, 1, -1, 0, 2, -3, -4, 0, 2, -2, -2, 0, 0, 0, -1, 0, 0, -1, -1, 0,
    ],
    [
        -2, 0, 2, 0, 0, 0, 0, 0, -2, 0, 1, 0, 0, 0, 0, 0, -1, -1, 1, -1, 0, 0, 0, 0, -1, -4, 2, 0,
        0, 0, 0, 0, -8, -2, -1, 1, 30, 4, -4, 1, -102, 4, 8, -1, -69, -2, 6, -1,
    ],
    [
        -2, -10, -4, 0, 0, 0, 0, 0, 3, 11, -1, -1, 0, 0, 0, 0, -6, -40, -15, 6, -2, 1, 0, 0, 5, 57,
        -6, 2, 0, 0, 0, 0, 1, -95, 18, -6, -10, -34, -2, 0, -4, 17, -2, 0, 0, 2, 1, 0,
    ],
    [
        -2, -3, -25, -2, -3, 0, -1, 0, -1, -3, -1, 4, -2, 2, 0, 1, -7, -8, -97, 17, -9, 3, -3, 1,
        -8, -26, -61, -1, -3, -1, -1, -1, 2, 10, 24, -7, 5, 9, 19, -1, 0, 1, 4, 0, -2, 0, 1, 0,
    ],
    [
        4, -4, 28, 103, -42, 24, -9, 7, 1, 2, 4, 0, 3, -1, 0, 0, -1, 0, -9, -42, 17, -9, 3, -2, -1,
        1, -14, 6, -4, 2, -1, 0, -1, -2, -4, 4, 0, 3, 1, -1, 0, 2, 0, -2, 2, 0, 0, 0,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_2_2: [[i16; 48]; 16] = [
    [
        87, -41, 3, -4, 1, -1, 0, -1, -73, 28, 2, 1, 1, 1, 0, 0, 30, -5, -6, 1, -1, 0, 0, 0, -8,
        -3, 3, 0, 0, 0, 0, 0, 3, 2, -1, 0, -2, -1, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0,
    ],
    [
        -75, 4, 7, 0, 2, 0, 1, 0, -41, 36, -7, 3, -1, 1, 0, 0, 72, -29, -2, 0, -1, 0, -1, 0, -37,
        6, 7, -2, 1, 0, 0, 0, 12, 3, -4, 0, -3, -2, 1, 0, 4, 0, 0, 0, -1, 0, 0, 0,
    ],
    [
        26, -44, 22, -6, 4, -2, 1, -1, 77, 24, -22, 2, -4, 0, -1, 0, 7, -38, 10, 0, 1, 0, 0, 0,
        -51, 27, 4, -3, 2, -1, 1, 0, 31, -5, -8, 3, -14, 0, 5, -1, 6, 1, -3, 0, -4, -1, 1, 0,
    ],
    [
        -39, -68, 37, -7, 6, -2, 2, 0, -9, 56, -21, 1, -2, 0, -1, 0, -45, 4, -3, 6, -1, 2, 0, 1,
        49, -13, 3, -3, -1, 0, 0, 0, -19, 2, 0, 0, 5, 1, 1, 0, -2, 0, -1, 0, 1, 0, 0, 0,
    ],
    [
        10, -20, 2, 0, 1, 0, 0, 0, 50, -1, 8, -5, 1, -1, 0, 0, 66, 17, -24, 4, -3, 1, -1, 0, 13,
        -49, 15, 1, 0, 0, 0, 0, -53, 34, 6, -5, 30, -7, -11, 3, -11, -2, 5, 1, 4, 2, -1, -1,
    ],
    [
        -21, -45, 8, -2, 3, -1, 1, 0, -7, -30, 26, -8, 3, -1, 1, -1, -9, 69, -33, 5, -2, 0, -1, 0,
        -44, -31, 10, 7, -2, 2, 0, 1, 49, 7, 2, -6, -23, -3, -2, 2, 9, 4, 0, 0, -2, -1, -1, 0,
    ],
    [
        -4, -2, -55, 28, -8, 5, -3, 2, -2, 37, 43, -19, 1, -2, 1, -1, -47, -34, -27, 5, 4, -1, 1,
        0, -39, -2, 27, 4, -2, 1, 0, 0, -11, 32, -8, -7, 27, -12, -6, 6, -13, 0, 4, -3, 3, -1, -2,
        1,
    ],
    [
        2, 19, 47, -23, 6, -4, 2, -1, -23, -22, -44, 17, -2, 2, -1, 0, -33, 3, 22, -2, -4, 1, -1,
        0, -58, -17, 6, -6, 7, -1, 1, 0, -23, 40, -2, 5, 43, -11, -8, -1, -18, -4, 5, 2, 4, 3, 0,
        -1,
    ],
    [
        -19, -62, -9, 3, 0, 0, 0, 0, -12, -56, 27, -7, 3, -1, 1, 0, 7, -8, 16, -6, 4, -2, 1, -1,
        -15, 54, -23, 2, -1, 0, 0, 0, -42, -25, 4, 6, 34, 8, 2, -2, -15, -1, 0, -1, 3, 2, 0, 1,
    ],
    [
        1, 9, -5, 0, -1, 0, 0, 0, 0, 22, -1, 2, 0, 1, 0, 0, -13, 17, 0, -2, 0, -1, 0, 0, -46, -10,
        -10, 4, -1, 1, 0, 0, -80, -27, 20, -4, -66, 23, -2, -2, 20, -3, -2, 3, -14, 2, 3, -1,
    ],
    [
        5, 17, -9, 0, -2, 1, 0, 0, 13, 54, -2, 7, -1, 1, 0, 0, 4, 51, -3, -6, -1, -1, 0, 0, -46,
        -10, -10, 4, -1, 1, 0, 0, 16, -52, 28, 1, 59, 15, -8, -5, -28, -7, 2, 2, 10, 3, 0, -1,
    ],
    [
        7, 27, 56, -2, 10, -3, 3, -1, -2, -6, 8, -28, 3, -4, 1, -1, -1, -4, -68, 35, -5, 5, -2, 1,
        0, 35, 43, -4, -6, 1, -1, 0, -14, -38, -12, -10, 9, 5, 7, 6, -9, 7, -4, -3, 4, -4, 0, 3,
    ],
    [
        0, 0, 19, -4, 3, -2, 2, -1, -3, -13, 10, -4, 1, 0, 0, 0, -6, -37, -18, -5, 2, -2, 1, -1, 6,
        -6, -7, 25, -6, 4, -1, 1, 16, 10, 55, -24, 15, 46, -52, 1, 35, -43, 10, 12, -23, 13, 5, -8,
    ],
    [
        -3, 0, -27, -80, 40, -16, 6, -4, 4, 3, 31, 61, -22, 7, -1, 1, -4, -7, -26, -6, -10, 6, -4,
        1, 3, 8, 14, -18, 15, -5, 2, -1, -2, -4, -1, 13, 0, 2, -4, -3, 3, -1, 2, 1, -2, 0, -2, -1,
    ],
    [
        1, 2, -8, 6, -1, 1, 0, 0, 2, 8, -5, -1, 0, 0, 0, 0, 1, 24, 3, 5, -1, 1, 0, 0, -3, 12, 6,
        -10, 1, -1, 0, 0, -9, -1, -25, 10, 45, -11, 18, 2, 86, 1, -13, -4, -65, -6, 7, 2,
    ],
    [
        -4, -18, -57, 8, -8, 1, -3, 0, -5, -20, -69, 7, -6, 2, -2, 1, 1, 4, 0, 33, -7, 5, -2, 1, 0,
        -9, 53, -22, 3, -1, 0, 0, 4, -27, -2, -9, 5, 36, -13, 5, -7, -17, 1, 2, 4, 6, 4, -1,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_3_1: [[i16; 48]; 16] = [
    [
        -115, 37, 9, 2, 2, 1, 1, 0, 10, -29, 8, 0, 1, 0, 1, 0, 23, -8, -8, 1, -1, 0, 0, 0, 3, 3,
        -2, -1, 0, 0, 0, 0, 4, 0, 0, -1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
    ],
    [
        15, 51, -18, 0, -3, 0, -1, 0, -95, 7, 34, -3, 5, -1, 2, 0, 23, -47, 1, 6, 0, 1, 0, 1, 8, 5,
        -12, 0, -1, 0, 0, 0, 3, -3, 1, -1, 2, 1, -2, 0, 1, -1, 0, 0, 1, 1, -1, 0,
    ],
    [
        29, -22, 16, -6, 3, -2, 1, -1, -4, -80, 12, 15, 0, 3, 0, 1, 45, 7, -59, 7, -2, 1, -1, 0,
        -15, 41, -3, -16, 2, -3, 0, -1, 1, 0, 7, -2, -3, 6, 1, -2, 0, 0, 1, 0, -1, 2, 0, -1,
    ],
    [
        -36, -98, 25, 5, 4, 1, 2, 1, -59, 11, -17, 1, 1, 1, 0, 0, 6, -13, 7, -3, 0, 0, 0, 0, 14,
        -4, -14, 3, -1, 0, 0, 0, 2, 8, -3, -5, 2, 0, 0, 0, 0, 3, 0, -1, 1, 0, 0, 0,
    ],
    [
        -6, 18, 3, -3, -1, 0, 0, 0, -50, -5, -38, 12, 0, 2, 0, 1, 3, 67, -7, -40, 3, -6, 1, -3,
        -12, -13, 65, -3, -10, 0, -1, 0, 9, -20, -5, 22, -2, 0, 0, -1, 2, -3, -2, 3, -1, 0, 1, 0,
    ],
    [
        4, 15, 52, -13, 5, -3, 2, -1, -17, -45, 16, 24, -2, 4, -1, 2, -87, -8, -14, 7, 8, 1, 2, 0,
        23, -35, -6, -3, 1, 1, 0, 0, 2, 5, -17, 0, 3, -1, -1, -5, 0, 1, -4, 0, 1, 0, 0, -2,
    ],
    [
        -20, -7, -43, 4, 0, 1, -1, 1, -7, 35, 0, 12, -4, 1, -1, 0, -51, -2, -57, 5, 15, 0, 4, 0, 7,
        39, 5, -55, 1, -7, 1, -3, 1, -10, 41, 2, 4, -3, -2, 3, -1, -2, 7, 1, 1, -1, -1, 0,
    ],
    [
        4, 29, 1, 26, -5, 4, -2, 1, -17, -7, -73, 6, 6, 2, 1, 1, -5, 21, -3, 5, -1, -3, 0, -1, -11,
        2, -52, -3, 27, -2, 5, 0, 0, 27, 8, -58, 2, -5, 25, 3, 0, 3, 0, -5, 0, -2, 7, 0,
    ],
    [
        12, 13, 10, 2, -1, 3, -1, 1, 17, -2, -46, 12, 7, 0, 2, 0, 16, -45, -9, -53, 6, 1, 1, 0, 70,
        16, 8, -4, -37, 1, -7, 0, -12, 29, 3, 21, 4, 0, 5, -1, -3, 4, 1, 4, 2, 0, 1, 0,
    ],
    [
        5, 20, 90, -17, 4, -3, 2, -1, 6, 66, 8, 28, -7, 3, -1, 1, 29, 5, -19, 12, 9, -1, 1, 0, -10,
        14, -1, -13, 7, 0, 1, 0, 0, -6, 13, -4, 0, -4, 1, 5, 0, -1, -1, 1, 0, -1, 0, 0,
    ],
    [
        -3, -4, -34, -12, 2, -1, -1, 0, 5, 25, 11, 43, -10, 4, -2, 1, 23, 20, -40, 12, 21, -3, 4,
        -1, 25, -28, -10, 5, 8, 6, 0, 2, -4, 21, -64, -8, -5, 19, 10, -48, 3, -1, 10, -3, 0, 4, 3,
        -6,
    ],
    [
        -1, -3, 2, 19, -2, 4, -1, 2, 9, 3, -35, 22, 11, 1, 2, 0, -7, -65, -19, -33, 11, 4, 2, 1,
        -75, -18, 3, -1, -10, 2, 0, 1, 2, -35, -27, 4, 1, 8, -17, -19, 3, 0, 3, -6, 0, 2, -1, -2,
    ],
    [
        10, -4, -6, 12, 5, 1, 1, 0, 11, -9, -12, -2, -7, 0, -1, 0, 33, -10, -4, 18, 18, -4, 4, -1,
        28, -72, 1, -49, 15, 2, 2, 1, 56, -23, 22, -1, 4, -1, -15, 26, 6, 4, -10, 0, 0, 2, -3, 2,
    ],
    [
        4, 6, 14, 53, -4, 4, 0, 2, 0, -1, -20, -13, 3, 2, -1, 1, -3, 1, -5, 35, -16, -6, -1, -2,
        46, 29, 13, 21, 37, -5, 4, -1, -10, -53, -18, 8, 9, 12, -41, -25, -2, 2, 13, -16, 4, 1, -5,
        1,
    ],
    [
        2, 9, 13, 37, 19, 6, 2, 2, -9, -3, -9, -28, -20, -4, -3, -1, 1, 18, 9, 28, 24, 6, 2, 2,
        -20, -5, -25, -33, -36, 9, -2, 2, -13, 42, 1, 57, -22, -2, -25, -28, 5, 6, 19, -12, -5, -3,
        -2, 4,
    ],
    [
        3, -3, 12, 84, -12, 8, -2, 3, 6, 13, 50, -1, 45, 1, 7, 0, -2, 18, -22, -37, -13, 14, 0, 3,
        1, -12, -3, 2, -15, -8, 1, -1, 19, 14, -4, -12, -4, 5, -17, 8, 2, -4, -4, 4, -2, 2, 1, 0,
    ],
];

const LOW_FREQ_TRANS_MATRIX_48_3_2: [[i16; 48]; 16] = [
    [
        109, -26, -8, -3, -2, -1, -1, 0, -50, 28, 2, 1, 0, 0, 0, 0, -18, -8, 6, 0, 1, 0, 1, 0, 6,
        -2, -3, 0, 0, 0, 0, 0, -3, 2, 1, -1, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
    ],
    [
        -39, 31, -5, 2, -1, 1, 0, 0, -95, 6, 18, 0, 4, 0, 1, 0, 32, -49, 5, 1, 1, 0, 0, 0, 27, -1,
        -14, 2, -2, 1, -1, 0, 3, 5, -3, -2, 4, 1, -1, -1, 2, 0, 0, 0, 2, 0, 0, 0,
    ],
    [
        29, -3, -2, -2, 0, 0, 0, 0, 0, -41, 9, 0, 2, 0, 1, 0, 86, 4, -33, 2, -6, 1, -2, 0, -32, 58,
        1, -7, 0, -2, 0, -1, -14, -8, 20, 0, -2, -3, 0, 4, -1, -1, 0, 0, -1, 1, 0, 0,
    ],
    [
        18, 96, -23, 2, -5, 1, -2, 0, -10, 6, 10, -2, 1, -1, 1, 0, -14, 26, 2, -4, 1, -1, 0, 0,
        -43, -9, 35, -2, 4, -1, 1, 0, 14, -40, 1, 10, 2, 1, -10, 1, 2, -4, -1, -1, 0, 0, -1, 0,
    ],
    [
        -29, -60, 16, -2, 3, -1, 1, 0, -52, 9, -17, 5, -2, 1, -1, 1, 13, 56, -2, -9, 0, -2, 0, -1,
        -34, -18, 41, 0, 3, 0, 1, 0, 19, -36, -10, 13, 3, 6, -14, -1, 3, 1, -1, -3, 1, 1, -1, -1,
    ],
    [
        -23, -5, -15, 5, -2, 1, -1, 1, 2, 79, -13, -4, -2, -1, -1, 0, -9, 1, 5, -1, 1, 0, 0, 0, -4,
        49, 2, -14, 1, -3, 0, -1, -31, -14, 56, -1, 13, -37, -4, 20, -2, 2, -10, 0, 2, -4, 0, -1,
    ],
    [
        -7, -3, 12, -3, 3, -1, 1, 0, -31, -62, 8, 7, 0, 2, 0, 1, -75, 9, -45, 5, -1, 1, -1, 0, 14,
        35, 0, -23, 2, -5, 1, -2, 1, -8, 32, -1, 7, -12, -4, 10, 0, 2, -6, -1, 2, 0, 0, -2,
    ],
    [
        1, -26, 5, 0, 1, 0, 1, 0, 24, -3, 43, -6, 4, -2, 1, -1, -7, -64, 9, 14, 0, 3, 0, 1, -12,
        -4, 5, 3, -1, 1, 0, 0, 8, -59, -3, 26, 14, 6, -58, 6, -5, 17, -7, -18, 3, 3, -1, -5,
    ],
    [
        11, 14, 6, -3, 1, -1, 1, 0, 10, -7, -9, 3, -2, 1, -1, 0, 22, 21, 1, -21, 2, -4, 1, -2, 92,
        1, 53, 0, -9, 1, -2, 0, -21, -11, 1, 40, -5, -4, -24, 5, -4, 5, -6, -5, 0, 0, 0, -3,
    ],
    [
        -10, -11, -47, 3, -4, 1, -1, 0, 5, 28, 11, -2, -1, 0, 0, 0, -12, -2, -38, 2, 0, 1, 0, 0,
        -16, 38, 11, -16, -1, -3, 0, -2, 12, -9, -22, 7, -8, 60, 4, -36, -6, -15, 54, 7, 3, -7, -8,
        14,
    ],
    [
        -8, -24, -99, 11, -10, 3, -4, 1, -5, -36, 19, -26, 4, -5, 1, -2, 0, 25, 41, 5, -3, 1, 0, 0,
        10, -5, -7, 12, 2, 1, 0, 0, -1, 1, 9, -3, -3, -14, -3, 12, 2, 4, -13, -2, -1, 3, 2, -4,
    ],
    [
        -5, 1, -1, 0, 1, 0, 0, 0, -10, -14, -6, 8, 0, 1, 0, 0, -17, -2, 7, -5, 3, -1, 0, 0, -16,
        13, 3, 31, -1, 6, 0, 2, -93, -15, -46, -3, 23, -19, 0, -47, 8, 4, 8, 3, 2, 3, 0, 0,
    ],
    [
        1, 12, -20, 21, -4, 5, -2, 2, -5, -2, -75, 9, -1, 2, -1, 1, -1, -2, -16, -4, 0, -1, 0, 0,
        -7, 7, -31, 0, 3, 0, 0, 0, 4, 11, -12, 4, -12, 14, -50, -1, -8, 32, -4, -54, 2, 0, 30, -15,
    ],
    [
        2, -9, -18, 8, -3, 3, -1, 1, 3, -25, -62, -6, 0, -2, 0, -1, -6, -61, 14, -51, 2, -6, 0, -2,
        -19, 0, 40, -7, -17, 0, -3, 0, 13, -4, 11, 9, 17, 0, 24, 5, 1, -12, 4, 28, 0, 0, -15, 8,
    ],
    [
        4, 9, 39, 18, 0, 2, 0, 1, -6, -16, -22, -37, 5, -5, 1, -2, -5, 15, 63, 9, -16, 0, -3, 0,
        18, 42, -18, 27, 15, 1, 3, 1, 12, -34, 9, -24, 4, 28, -2, 4, -11, -4, 30, 2, 5, -13, -4,
        18,
    ],
    [
        -7, -2, 15, -6, 1, -1, 1, -1, -11, -3, 22, -14, 0, -2, 1, -1, -18, -7, 30, -9, -4, 0, -1,
        0, -35, 23, 23, 10, -17, 1, -3, 0, -19, 53, 6, 48, -65, 12, -12, 11, -8, -16, 10, -21, -2,
        -12, 6, 2,
    ],
];

const TRANS_MATRIX_0_: [[i16; 32]; 64] = [
    [
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64,
    ],
    [
        91, 90, 90, 90, 88, 87, 86, 84, 83, 81, 79, 77, 73, 71, 69, 65, 62, 59, 56, 52, 48, 44, 41,
        37, 33, 28, 24, 20, 15, 11, 7, 2,
    ],
    [
        90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4, -4, -13, -22, -31, -38, -46,
        -54, -61, -67, -73, -78, -82, -85, -88, -90, -90,
    ],
    [
        90, 88, 84, 79, 71, 62, 52, 41, 28, 15, 2, -11, -24, -37, -48, -59, -69, -77, -83, -87,
        -90, -91, -90, -86, -81, -73, -65, -56, -44, -33, -20, -7,
    ],
    [
        90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90, -90, -87, -80, -70,
        -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90,
    ],
    [
        90, 84, 73, 59, 41, 20, -2, -24, -44, -62, -77, -86, -90, -90, -83, -71, -56, -37, -15, 7,
        28, 48, 65, 79, 87, 91, 88, 81, 69, 52, 33, 11,
    ],
    [
        90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13, 13, 38, 61, 78,
        88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90,
    ],
    [
        90, 79, 59, 33, 2, -28, -56, -77, -88, -90, -81, -62, -37, -7, 24, 52, 73, 87, 90, 83, 65,
        41, 11, -20, -48, -71, -86, -91, -84, -69, -44, -15,
    ],
    [
        89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89, 89, 75, 50, 18,
        -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
    ],
    [
        88, 71, 41, 2, -37, -69, -87, -90, -73, -44, -7, 33, 65, 86, 90, 77, 48, 11, -28, -62, -84,
        -90, -79, -52, -15, 24, 59, 83, 91, 81, 56, 20,
    ],
    [
        88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22, -22, -61, -85, -90,
        -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88,
    ],
    [
        87, 62, 20, -28, -69, -90, -78, -46, -4, 38, 73, 90, 81, 48, 2, -44, -79, -91, -77, -41, 7,
        52, 83, 90, 71, 33, -15, -59, -86, -88, -65, -24,
    ],
    [
        87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87, -87, -57, -9, 43, 80,
        90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87,
    ],
    [
        86, 52, -2, -56, -87, -84, -48, 7, 59, 88, 83, 44, -11, -62, -90, -81, -41, 15, 65, 90, 79,
        37, -20, -69, -90, -77, -33, 24, 71, 91, 73, 28,
    ],
    [
        85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31, 31, 78, 90, 61, 4,
        -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85,
    ],
    [
        84, 41, -24, -77, -90, -56, 7, 65, 91, 69, 11, -52, -88, -79, -28, 37, 83, 86, 44, -20,
        -73, -90, -59, 2, 62, 90, 71, 15, -48, -87, -81, -33,
    ],
    [
        83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83,
        -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
    ],
    [
        83, 28, -44, -88, -73, -11, 59, 91, 62, -7, -71, -90, -48, 24, 81, 84, 33, -41, -87, -77,
        -15, 56, 90, 65, -2, -69, -90, -52, 20, 79, 86, 37,
    ],
    [
        82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38, -38, -88, -73, -4, 67,
        90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82,
    ],
    [
        81, 15, -62, -90, -44, 37, 88, 69, -7, -77, -84, -24, 56, 91, 52, -28, -86, -73, -2, 71,
        87, 33, -48, -90, -59, 20, 83, 79, 11, -65, -90, -41,
    ],
    [
        80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80, -80, -9, 70, 87, 25,
        -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80,
    ],
    [
        79, 2, -77, -81, -7, 73, 83, 11, -71, -84, -15, 69, 86, 20, -65, -87, -24, 62, 88, 28, -59,
        -90, -33, 56, 90, 37, -52, -90, -41, 48, 91, 44,
    ],
    [
        78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46, 46, 90, 38, -54,
        -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78,
    ],
    [
        77, -11, -86, -62, 33, 90, 44, -52, -90, -24, 69, 83, 2, -81, -71, 20, 88, 56, -41, -91,
        -37, 59, 87, 15, -73, -79, 7, 84, 65, -28, -90, -48,
    ],
    [
        75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75, 75, -18, -89, -50,
        50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
    ],
    [
        73, -24, -90, -37, 65, 81, -11, -88, -48, 56, 86, 2, -84, -59, 44, 90, 15, -79, -69, 33,
        91, 28, -71, -77, 20, 90, 41, -62, -83, 7, 87, 52,
    ],
    [
        73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54, -54, -85, 4, 88,
        46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73,
    ],
    [
        71, -37, -90, -7, 86, 48, -62, -79, 24, 91, 20, -81, -59, 52, 84, -11, -90, -33, 73, 69,
        -41, -88, -2, 87, 44, -65, -77, 28, 90, 15, -83, -56,
    ],
    [
        70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70, -70, 43, 87, -9, -90,
        -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70,
    ],
    [
        69, -48, -83, 24, 90, 2, -90, -28, 81, 52, -65, -71, 44, 84, -20, -90, -7, 88, 33, -79,
        -56, 62, 73, -41, -86, 15, 91, 11, -87, -37, 77, 59,
    ],
    [
        67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61, 61, 73, -46, -82,
        31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67,
    ],
    [
        65, -59, -71, 52, 77, -44, -81, 37, 84, -28, -87, 20, 90, -11, -90, 2, 91, 7, -90, -15, 88,
        24, -86, -33, 83, 41, -79, -48, 73, 56, -69, -62,
    ],
    [
        64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
        64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
    ],
    [
        62, -69, -56, 73, 48, -79, -41, 83, 33, -86, -24, 88, 15, -90, -7, 91, -2, -90, 11, 90,
        -20, -87, 28, 84, -37, -81, 44, 77, -52, -71, 59, 65,
    ],
    [
        61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67, -67, -54, 78, 38,
        -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61,
    ],
    [
        59, -77, -37, 87, 11, -91, 15, 86, -41, -73, 62, 56, -79, -33, 88, 7, -90, 20, 84, -44,
        -71, 65, 52, -81, -28, 90, 2, -90, 24, 83, -48, -69,
    ],
    [
        57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57, -57, 80, 25, -90, 9,
        87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57,
    ],
    [
        56, -83, -15, 90, -28, -77, 65, 44, -87, -2, 88, -41, -69, 73, 33, -90, 11, 84, -52, -59,
        81, 20, -91, 24, 79, -62, -48, 86, 7, -90, 37, 71,
    ],
    [
        54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73, 73, 31, -90, 22,
        78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54,
    ],
    [
        52, -87, 7, 83, -62, -41, 90, -20, -77, 71, 28, -91, 33, 69, -79, -15, 90, -44, -59, 84, 2,
        -86, 56, 48, -88, 11, 81, -65, -37, 90, -24, -73,
    ],
    [
        50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50, 50, -89, 18, 75,
        -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
    ],
    [
        48, -90, 28, 65, -84, 7, 79, -73, -15, 87, -59, -37, 91, -41, -56, 88, -20, -71, 81, 2,
        -83, 69, 24, -90, 52, 44, -90, 33, 62, -86, 11, 77,
    ],
    [
        46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78, -78, -4, 82, -73, -13,
        85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46,
    ],
    [
        44, -91, 48, 41, -90, 52, 37, -90, 56, 33, -90, 59, 28, -88, 62, 24, -87, 65, 20, -86, 69,
        15, -84, 71, 11, -83, 73, 7, -81, 77, 2, -79,
    ],
    [
        43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43, -43, 90, -57, -25,
        87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43,
    ],
    [
        41, -90, 65, 11, -79, 83, -20, -59, 90, -48, -33, 87, -71, -2, 73, -86, 28, 52, -91, 56,
        24, -84, 77, -7, -69, 88, -37, -44, 90, -62, -15, 81,
    ],
    [
        38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82, 82, -22, -54, 90,
        -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38,
    ],
    [
        37, -86, 79, -20, -52, 90, -69, 2, 65, -90, 56, 15, -77, 87, -41, -33, 84, -81, 24, 48,
        -90, 71, -7, -62, 91, -59, -11, 73, -88, 44, 28, -83,
    ],
    [
        36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36,
        -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
    ],
    [
        33, -81, 87, -48, -15, 71, -90, 62, -2, -59, 90, -73, 20, 44, -86, 83, -37, -28, 79, -88,
        52, 11, -69, 91, -65, 7, 56, -90, 77, -24, -41, 84,
    ],
    [
        31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85, -85, 46, 13, -67,
        90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31,
    ],
    [
        28, -73, 91, -71, 24, 33, -77, 90, -69, 20, 37, -79, 90, -65, 15, 41, -81, 90, -62, 11, 44,
        -83, 88, -59, 7, 48, -84, 87, -56, 2, 52, -86,
    ],
    [
        25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25, -25, 70, -90, 80,
        -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25,
    ],
    [
        24, -65, 88, -86, 59, -15, -33, 71, -90, 83, -52, 7, 41, -77, 91, -79, 44, 2, -48, 81, -90,
        73, -37, -11, 56, -84, 90, -69, 28, 20, -62, 87,
    ],
    [
        22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88, 88, -67, 31, 13,
        -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22,
    ],
    [
        20, -56, 81, -91, 83, -59, 24, 15, -52, 79, -90, 84, -62, 28, 11, -48, 77, -90, 86, -65,
        33, 7, -44, 73, -90, 87, -69, 37, 2, -41, 71, -88,
    ],
    [
        18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18, 18, -50, 75, -89,
        89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
    ],
    [
        15, -44, 69, -84, 91, -86, 71, -48, 20, 11, -41, 65, -83, 90, -87, 73, -52, 24, 7, -37, 62,
        -81, 90, -88, 77, -56, 28, 2, -33, 59, -79, 90,
    ],
    [
        13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90, -90, 82, -67, 46,
        -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13,
    ],
    [
        11, -33, 52, -69, 81, -88, 91, -87, 79, -65, 48, -28, 7, 15, -37, 56, -71, 83, -90, 90,
        -86, 77, -62, 44, -24, 2, 20, -41, 59, -73, 84, -90,
    ],
    [
        9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9, -9, 25, -43, 57, -70,
        80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9,
    ],
    [
        7, -20, 33, -44, 56, -65, 73, -81, 86, -90, 91, -90, 87, -83, 77, -69, 59, -48, 37, -24,
        11, 2, -15, 28, -41, 52, -62, 71, -79, 84, -88, 90,
    ],
    [
        4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90, 90, -90, 88, -85,
        82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4,
    ],
    [
        2, -7, 11, -15, 20, -24, 28, -33, 37, -41, 44, -48, 52, -56, 59, -62, 65, -69, 71, -73, 77,
        -79, 81, -83, 84, -86, 87, -88, 90, -90, 90, -91,
    ],
];

lazy_static! {
    #[derive(Debug)]
    pub static ref TRANS_MATRIX_0: Vec<Vec<Vec2d<i16>>> = {
        let B = TRANS_MATRIX_0_
        .iter()
        .enumerate()
        .map(|(n, r)| {
            let mut t = vec![0i16; 64];
            t[..32].copy_from_slice(&r[..32]);
            let sign = 1 - 2 * (n as i16 & 1);
            for i in 0..16 {
                t[i + 32] = r[31 - i] * sign;
                t[i + 48] = r[15 - i] * sign;
            }
            t
        })
        .collect::<Vec<Vec<i16>>>();
        let L = 6;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_1_4: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![29, 55, 74, 84],
            vec![74, 74, 0, -74],
            vec![84, -29, -74, 55],
            vec![55, -84, 74, -29],
        ];
        let L = 2;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_1_8: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![17, 32, 46, 60, 71, 78, 85, 86],
            vec![46, 78, 86, 71, 32, -17, -60, -85],
            vec![71, 85, 32, -46, -86, -60, 17, 78],
            vec![85, 46, -60, -78, 17, 86, 32, -71],
            vec![86, -17, -85, 32, 78, -46, -71, 60],
            vec![78, -71, -17, 85, -60, -32, 86, -46],
            vec![60, -86, 71, -17, -46, 85, -78, 32],
            vec![32, -60, 78, -86, 85, -71, 46, -17],
        ];
        let L = 3;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_1_16: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![
                8, 17, 25, 33, 40, 48, 55, 62, 68, 73, 77, 81, 85, 87, 88, 88,
            ],
            vec![
                25, 48, 68, 81, 88, 88, 81, 68, 48, 25, 0, -25, -48, -68, -81, -88,
            ],
            vec![
                40, 73, 88, 85, 62, 25, -17, -55, -81, -88, -77, -48, -8, 33, 68, 87,
            ],
            vec![
                55, 87, 81, 40, -17, -68, -88, -73, -25, 33, 77, 88, 62, 8, -48, -85,
            ],
            vec![
                68, 88, 48, -25, -81, -81, -25, 48, 88, 68, 0, -68, -88, -48, 25, 81,
            ],
            vec![
                77, 77, 0, -77, -77, 0, 77, 77, 0, -77, -77, 0, 77, 77, 0, -77,
            ],
            vec![
                85, 55, -48, -87, -8, 81, 62, -40, -88, -17, 77, 68, -33, -88, -25, 73,
            ],
            vec![
                88, 25, -81, -48, 68, 68, -48, -81, 25, 88, 0, -88, -25, 81, 48, -68,
            ],
            vec![
                88, -8, -88, 17, 87, -25, -85, 33, 81, -40, -77, 48, 73, -55, -68, 62,
            ],
            vec![
                87, -40, -68, 73, 33, -88, 8, 85, -48, -62, 77, 25, -88, 17, 81, -55,
            ],
            vec![
                81, -68, -25, 88, -48, -48, 88, -25, -68, 81, 0, -81, 68, 25, -88, 48,
            ],
            vec![
                73, -85, 25, 55, -88, 48, 33, -87, 68, 8, -77, 81, -17, -62, 88, -40,
            ],
            vec![
                62, -88, 68, -8, -55, 88, -73, 17, 48, -87, 77, -25, -40, 85, -81, 33,
            ],
            vec![
                48, -81, 88, -68, 25, 25, -68, 88, -81, 48, 0, -48, 81, -88, 68, -25,
            ],
            vec![
                33, -62, 81, -88, 85, -68, 40, -8, -25, 55, -77, 88, -87, 73, -48, 17,
            ],
            vec![
                17, -33, 48, -62, 73, -81, 87, -88, 88, -85, 77, -68, 55, -40, 25, -8,
            ],
        ];
        let L = 4;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_1_32: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![
                4, 9, 13, 17, 21, 26, 30, 34, 38, 42, 46, 50, 53, 56, 60, 63, 66, 68, 72, 74, 77, 78, 80,
                82, 84, 85, 86, 87, 88, 89, 90, 90,
            ],
            vec![
                13, 26, 38, 50, 60, 68, 77, 82, 86, 89, 90, 88, 85, 80, 74, 66, 56, 46, 34, 21, 9, -4, -17,
                -30, -42, -53, -63, -72, -78, -84, -87, -90,
            ],
            vec![
                21, 42, 60, 74, 84, 89, 89, 84, 74, 60, 42, 21, 0, -21, -42, -60, -74, -84, -89, -89, -84,
                -74, -60, -42, -21, 0, 21, 42, 60, 74, 84, 89,
            ],
            vec![
                30, 56, 77, 87, 89, 80, 63, 38, 9, -21, -50, -72, -85, -90, -84, -68, -46, -17, 13, 42, 66,
                82, 90, 86, 74, 53, 26, -4, -34, -60, -78, -88,
            ],
            vec![
                38, 68, 86, 88, 74, 46, 9, -30, -63, -84, -90, -78, -53, -17, 21, 56, 80, 90, 82, 60, 26,
                -13, -50, -77, -89, -85, -66, -34, 4, 42, 72, 87,
            ],
            vec![
                46, 78, 90, 77, 42, -4, -50, -80, -90, -74, -38, 9, 53, 82, 89, 72, 34, -13, -56, -84, -88,
                -68, -30, 17, 60, 85, 87, 66, 26, -21, -63, -86,
            ],
            vec![
                53, 85, 85, 53, 0, -53, -85, -85, -53, 0, 53, 85, 85, 53, 0, -53, -85, -85, -53, 0, 53, 85,
                85, 53, 0, -53, -85, -85, -53, 0, 53, 85,
            ],
            vec![
                60, 89, 74, 21, -42, -84, -84, -42, 21, 74, 89, 60, 0, -60, -89, -74, -21, 42, 84, 84, 42,
                -21, -74, -89, -60, 0, 60, 89, 74, 21, -42, -84,
            ],
            vec![
                66, 90, 56, -13, -74, -87, -46, 26, 80, 84, 34, -38, -85, -78, -21, 50, 88, 72, 9, -60,
                -90, -63, 4, 68, 89, 53, -17, -77, -86, -42, 30, 82,
            ],
            vec![
                72, 86, 34, -46, -89, -63, 13, 78, 82, 21, -56, -90, -53, 26, 84, 77, 9, -66, -88, -42, 38,
                87, 68, -4, -74, -85, -30, 50, 90, 60, -17, -80,
            ],
            vec![
                77, 80, 9, -72, -84, -17, 66, 86, 26, -60, -88, -34, 53, 90, 42, -46, -90, -50, 38, 89, 56,
                -30, -87, -63, 21, 85, 68, -13, -82, -74, 4, 78,
            ],
            vec![
                80, 72, -17, -86, -60, 34, 90, 46, -50, -89, -30, 63, 85, 13, -74, -78, 4, 82, 68, -21,
                -87, -56, 38, 90, 42, -53, -88, -26, 66, 84, 9, -77,
            ],
            vec![
                84, 60, -42, -89, -21, 74, 74, -21, -89, -42, 60, 84, 0, -84, -60, 80, 89, 21, -74, -74,
                21, 89, 42, -60, -84, 0, 84, 60, -42, -89, -21, 74,
            ],
            vec![
                86, 46, -63, -78, 21, 90, 26, -77, -66, 42, 87, 4, -85, -50, 60, 80, -17, -90, -30, 74, 68,
                -38, -88, -9, 84, 53, -56, -82, 13, 89, 34, -72,
            ],
            vec![
                88, 30, -78, -56, 60, 77, -34, -87, 4, 89, 26, -80, -53, 63, 74, -38, -86, 9, 90, 21, -82,
                -50, 66, 72, -42, -85, 13, 90, 17, -84, -46, 68,
            ],
            vec![
                90, 13, -87, -26, 84, 38, -78, -50, 72, 60, -63, -68, 53, 77, -42, -82, 30, 86, -17, -89,
                4, 90, 9, -88, -21, 85, 34, -80, -46, 74, 56, -66,
            ],
        ];
        let L = 5;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_2_4: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![84, 74, 55, 29],
            vec![74, 0, -74, -74],
            vec![55, -74, -29, 84],
            vec![29, -74, 84, -55],
        ];
        let L = 2;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_2_8: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![86, 85, 78, 71, 60, 46, 32, 17],
            vec![85, 60, 17, -32, -71, -86, -78, -46],
            vec![78, 17, -60, -86, -46, 32, 85, 71],
            vec![71, -32, -86, -17, 78, 60, -46, -85],
            vec![60, -71, -46, 78, 32, -85, -17, 86],
            vec![46, -86, 32, 60, -85, 17, 71, -78],
            vec![32, -78, 85, -46, -17, 71, -86, 60],
            vec![17, -46, 71, -85, 86, -78, 60, -32],
        ];
        let L = 3;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_2_16: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![
                88, 88, 87, 85, 81, 77, 73, 68, 62, 55, 48, 40, 33, 25, 17, 8,
            ],
            vec![
                88, 81, 68, 48, 25, 0, -25, -48, -68, -81, -88, -88, -81, -68, -48, -25,
            ],
            vec![
                87, 68, 33, -8, -48, -77, -88, -81, -55, -17, 25, 62, 85, 88, 73, 40,
            ],
            vec![
                85, 48, -8, -62, -88, -77, -33, 25, 73, 88, 68, 17, -40, -81, -87, -55,
            ],
            vec![
                81, 25, -48, -88, -68, 0, 68, 88, 48, -25, -81, -81, -25, 48, 88, 68,
            ],
            vec![
                77, 0, -77, -77, 0, 77, 77, 0, -77, -77, 0, 77, 77, 0, -77, -77,
            ],
            vec![
                73, -25, -88, -33, 68, 77, -17, -88, -40, 62, 81, -8, -87, -48, 55, 85,
            ],
            vec![
                68, -48, -81, 25, 88, 0, -88, -25, 81, 48, -68, -68, 48, 81, -25, -88,
            ],
            vec![
                62, -68, -55, 73, 48, -77, -40, 81, 33, -85, -25, 87, 17, -88, -8, 88,
            ],
            vec![
                55, -81, -17, 88, -25, -77, 62, 48, -85, -8, 88, -33, -73, 68, 40, -87,
            ],
            vec![
                48, -88, 25, 68, -81, 0, 81, -68, -25, 88, -48, -48, 88, -25, -68, 81,
            ],
            vec![
                40, -88, 62, 17, -81, 77, -8, -68, 87, -33, -48, 88, -55, -25, 85, -73,
            ],
            vec![
                33, -81, 85, -40, -25, 77, -87, 48, 17, -73, 88, -55, -8, 68, -88, 62,
            ],
            vec![
                25, -68, 88, -81, 48, 0, -48, 81, -88, 68, -25, -25, 68, -88, 81, -48,
            ],
            vec![
                17, -48, 73, -87, 88, -77, 55, -25, -8, 40, -68, 85, -88, 81, -62, 33,
            ],
            vec![
                8, -25, 40, -55, 68, -77, 85, -88, 88, -87, 81, -73, 62, -48, 33, -17,
            ],
        ];
        let L = 4;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };

    pub static ref TRANS_MATRIX_2_32: Vec<Vec<Vec2d<i16>>> = {
        let B = vec![
            vec![
                90, 90, 89, 88, 87, 86, 85, 84, 82, 80, 78, 77, 74, 72, 68, 66, 63, 60, 56, 53, 50, 46, 42,
                38, 34, 30, 26, 21, 17, 13, 9, 4,
            ],
            vec![
                90, 87, 84, 78, 72, 63, 53, 42, 30, 17, 4, -9, -21, -34, -46, -56, -66, -74, -80, -85, -88,
                -90, -89, -86, -82, -77, -68, -60, -50, -38, -26, -13,
            ],
            vec![
                89, 84, 74, 60, 42, 21, 0, -21, -42, -60, -74, -84, -89, -89, -84, -74, -60, -42, -21, 0,
                21, 42, 60, 74, 84, 89, 89, 84, 74, 60, 42, 21,
            ],
            vec![
                88, 78, 60, 34, 4, -26, -53, -74, -86, -90, -82, -66, -42, -13, 17, 46, 68, 84, 90, 85, 72,
                50, 21, -9, -38, -63, -80, -89, -87, -77, -56, -30,
            ],
            vec![
                87, 72, 42, 4, -34, -66, -85, -89, -77, -50, -13, 26, 60, 82, 90, 80, 56, 21, -17, -53,
                -78, -90, -84, -63, -30, 9, 46, 74, 88, 86, 68, 38,
            ],
            vec![
                86, 63, 21, -26, -66, -87, -85, -60, -17, 30, 68, 88, 84, 56, 13, -34, -72, -89, -82, -53,
                -9, 38, 74, 90, 80, 50, 4, -42, -77, -90, -78, -46,
            ],
            vec![
                85, 53, 0, -53, -85, -85, -53, 0, 53, 85, 85, 53, 0, -53, -85, -85, -53, 0, 53, 85, 85, 53,
                0, -53, -85, -85, -53, 0, 53, 85, 85, 53,
            ],
            vec![
                84, 42, -21, -74, -89, -60, 0, 60, 89, 74, 21, -42, -84, -84, -42, 21, 74, 89, 60, 0, -60,
                -89, -74, -21, 42, 84, 84, 42, -21, -74, -89, -60,
            ],
            vec![
                82, 30, -42, -86, -77, -17, 53, 89, 68, 4, -63, -90, -60, 9, 72, 88, 50, -21, -78, -85,
                -38, 34, 84, 80, 26, -46, -87, -74, -13, 56, 90, 66,
            ],
            vec![
                80, 17, -60, -90, -50, 30, 85, 74, 4, -68, -87, -38, 42, 88, 66, -9, -77, -84, -26, 53, 90,
                56, -21, -82, -78, -13, 63, 89, 46, -34, -86, -72,
            ],
            vec![
                78, 4, -74, -82, -13, 68, 85, 21, -63, -87, -30, 56, 89, 38, -50, -90, -46, 42, 90, 53,
                -34, -88, -60, 26, 86, 66, -17, -84, -72, 9, 80, 77,
            ],
            vec![
                77, -9, -84, -66, 26, 88, 53, -42, -90, -38, 56, 87, 21, -68, -82, -4, 78, 74, -13, -85,
                -63, 30, 89, 50, -46, -90, -34, 60, 86, 17, -72, -80,
            ],
            vec![
                74, -21, -89, -42, 60, 84, 0, -84, -60, 42, 89, 21, -74, -74, 21, 89, 42, -60, 50, 85, -4,
                -87, -42, 66, 77, -26, -90, -21, 78, 63, -46, -86,
            ],
            vec![
                72, -34, -89, -13, 82, 56, -53, -84, 9, 88, 38, -68, -74, 30, 90, 17, -80, -60, 50, 85, -4,
                -87, -42, 66, 77, -26, -90, -21, 78, 63, -46, -86,
            ],
            vec![
                68, -46, -84, 17, 90, 13, -85, -42, 72, 66, -50, -82, 21, 90, 9, -86, -38, 74, 63, -53,
                -80, 26, 89, 4, -87, -34, 77, 60, -56, -78, 30, 88,
            ],
            vec![
                66, -56, -74, 46, 80, -34, -85, 21, 88, -9, -90, -4, 89, 17, -86, -30, 82, 42, -77, -53,
                68, 63, -60, -72, 50, 78, -38, -84, 26, 87, -13, -90,
            ],
        ];
        let L = 5;
        let N = 1 << L;
        let S = (0..L).map(|shift| {
            let mut v = vec2d![0; N>>shift; N];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[i][x] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let I = (0..L).map(|shift| {
            let mut v = vec2d![0; N; N>>shift];
            for i in 0..(N>>shift) {
                for x in 0..N {
                    let y = i << shift;
                    v[x][i] = B[y][x];
                }
            }
            v
        }).collect::<Vec<Vec2d<i16>>>();
        let T: Vec<Vec<Vec2d<i16>>> = vec![S, I];
        T
    };
}

pub struct Transformer {
    pub buffers0: Vec2d<i32>,
    pub buffers1: Vec2d<i32>,
    pub buffers2: Vec2d<i32>,
}

impl Transformer {
    pub fn new() -> Transformer {
        Transformer {
            buffers0: vec2d![0; 64; 64],
            buffers1: vec2d![0; 64; 64],
            buffers2: vec2d![0; 64; 64],
        }
    }

    pub fn get_trans_matrix(
        first_tr_type: usize,
        second_tr_type: usize,
        tr_size: usize,
    ) -> &'static Vec<Vec<Vec2d<i16>>> {
        let trans_matrix = if first_tr_type == 0 {
            TRANS_MATRIX_0.as_ref()
        } else if second_tr_type == 1 {
            if tr_size == 4 {
                TRANS_MATRIX_1_4.as_ref()
            } else if tr_size == 8 {
                TRANS_MATRIX_1_8.as_ref()
            } else if tr_size == 16 {
                TRANS_MATRIX_1_16.as_ref()
            } else {
                TRANS_MATRIX_1_32.as_ref()
            }
        } else if tr_size == 4 {
            TRANS_MATRIX_2_4.as_ref()
        } else if tr_size == 8 {
            TRANS_MATRIX_2_8.as_ref()
        } else if tr_size == 16 {
            TRANS_MATRIX_2_16.as_ref()
        } else {
            TRANS_MATRIX_2_32.as_ref()
        };
        trans_matrix
    }

    pub fn get_low_freq_trans_matrix(
        n_tr_s: usize,
        pred_mode_intra: isize,
        lfnst_idx: usize,
    ) -> Vec2d<i16> {
        let lfnst_tr_set_idx = Self::get_lfnst_tr_set_idx(pred_mode_intra);
        let low_freq_trans_matrix: Vec2d<i16> = if n_tr_s == 16 {
            let v = if lfnst_tr_set_idx == 0 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_16_0_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_16_0_2
                } else {
                    panic!()
                }
            } else if lfnst_tr_set_idx == 1 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_16_1_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_16_1_2
                } else {
                    panic!()
                }
            } else if lfnst_tr_set_idx == 2 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_16_2_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_16_2_2
                } else {
                    panic!()
                }
            } else if lfnst_tr_set_idx == 3 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_16_3_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_16_3_2
                } else {
                    panic!()
                }
            } else {
                panic!()
            };
            let mut m = vec2d![0; v.len(); v[0].len()];
            for y in 0..v.len() {
                for x in 0..v[0].len() {
                    m[y][x] = v[y][x];
                }
            }
            m
        } else if n_tr_s == 48 {
            let v = if lfnst_tr_set_idx == 0 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_48_0_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_48_0_2
                } else {
                    panic!()
                }
            } else if lfnst_tr_set_idx == 1 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_48_1_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_48_1_2
                } else {
                    panic!()
                }
            } else if lfnst_tr_set_idx == 2 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_48_2_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_48_2_2
                } else {
                    panic!()
                }
            } else if lfnst_tr_set_idx == 3 {
                if lfnst_idx == 1 {
                    LOW_FREQ_TRANS_MATRIX_48_3_1
                } else if lfnst_idx == 2 {
                    LOW_FREQ_TRANS_MATRIX_48_3_2
                } else {
                    panic!()
                }
            } else {
                panic!()
            };
            let mut m = vec2d![0; v.len(); v[0].len()];
            for y in 0..v.len() {
                for x in 0..v[0].len() {
                    m[y][x] = v[y][x];
                }
            }
            m
        } else {
            panic!()
        };
        low_freq_trans_matrix
    }

    pub fn get_hor_ver_tr_type(
        tu: &TransformUnit,
        cu: &CodingUnit,
        c_idx: usize,
        sps: &SequenceParameterSet,
        ectx: &EncoderContext,
    ) -> (usize, usize) {
        let (tw, th) = tu.get_component_size(c_idx);
        let implicit_mts_enabled = sps.mts_enabled_flag
            && (ectx.intra_subpartitions_split_type != IntraSubpartitionsSplitType::ISP_NO_SPLIT
                || (cu.sbt_flag && tw.max(th) <= 32)
                || (!sps.explicit_mts_intra_enabled_flag
                    && cu.pred_mode[0] == ModeType::MODE_INTRA
                    && cu.lfnst_idx == 0
                    && !cu.intra_mip_flag));
        let (tr_type_hor, tr_type_ver) = if c_idx > 0
            || (ectx.intra_subpartitions_split_type != IntraSubpartitionsSplitType::ISP_NO_SPLIT
                && cu.lfnst_idx != 0)
        {
            (0, 0)
        } else if implicit_mts_enabled {
            if cu.sbt_flag {
                match (cu.sbt_horizontal_flag, cu.sbt_pos_flag) {
                    (false, false) => (2, 1),
                    (false, true) => (1, 1),
                    (true, false) => (1, 2),
                    (true, true) => (1, 1),
                }
            } else {
                (
                    (4..=16).contains(&tw) as usize,
                    (4..=16).contains(&th) as usize,
                )
            }
        } else {
            match cu.mts_idx {
                0 => (0, 0),
                1 => (1, 1),
                2 => (2, 1),
                3 => (1, 2),
                4 => (2, 2),
                _ => panic!(),
            }
        };
        (tr_type_hor, tr_type_ver)
    }

    #[inline(always)]
    pub fn get_non_zero_size(
        tu: &TransformUnit,
        c_idx: usize,
        apply_lfnst_flag: bool,
        tr_type_hor: usize,
        tr_type_ver: usize,
    ) -> (usize, usize) {
        let (tw, th) = tu.get_component_size(c_idx);
        let (non_zero_w, non_zero_h) = if apply_lfnst_flag {
            (
                if tw == 4 || th == 4 { 4 } else { 8 },
                if tw == 4 || th == 4 { 4 } else { 8 },
            )
        } else {
            (
                tw.min(if tr_type_hor > 0 { 16 } else { 32 }),
                th.min(if tr_type_ver > 0 { 16 } else { 32 }),
            )
        };
        (non_zero_w, non_zero_h)
    }

    #[inline(always)]
    pub fn get_lfnst_tr_set_idx(pred_mode_intra: isize) -> usize {
        if pred_mode_intra < 0 {
            1
        } else if pred_mode_intra <= 1 {
            0
        } else if pred_mode_intra <= 12 {
            1
        } else if pred_mode_intra <= 23 {
            2
        } else if pred_mode_intra <= 44 {
            3
        } else if pred_mode_intra <= 55 {
            2
        } else {
            1
        }
    }

    #[inline(always)]
    pub fn get_tu_c_res_mode(tu: &TransformUnit) -> usize {
        if tu.joint_cbcr_residual_flag {
            if tu.get_cb_coded_flag() && !tu.get_cr_coded_flag() {
                1
            } else if tu.get_cb_coded_flag() {
                2
            } else {
                3
            }
        } else {
            0
        }
    }

    #[inline(always)]
    pub fn get_coded_c_idx(c_idx: usize, tu_c_res_mode: usize) -> usize {
        if c_idx == 0 || tu_c_res_mode == 0 {
            c_idx
        } else if tu_c_res_mode == 1 || tu_c_res_mode == 2 {
            1
        } else {
            2
        }
    }

    pub fn derive_pred_mode_intra(
        tu: &TransformUnit,
        cu: &CodingUnit,
        c_idx: usize,
        ectx: &EncoderContext,
    ) -> isize {
        let (tw, th) = tu.get_component_size(c_idx);
        let (cw, ch) = cu.get_component_size(c_idx);
        let mut pred_mode_intra = IntraPredMode::DC;
        if ectx.apply_lfnst_flag[c_idx] && !tu.transform_skip_flag[c_idx] {
            pred_mode_intra = cu.intra_pred_mode[c_idx];
        }
        if cu.intra_mip_flag && c_idx == 0 {
            pred_mode_intra = IntraPredMode::PLANAR;
        }
        match pred_mode_intra {
            IntraPredMode::LT_CCLM | IntraPredMode::L_CCLM | IntraPredMode::T_CCLM => {
                // FIXME + cb_width/2, cb_height/2 ?
                pred_mode_intra = if cu.intra_mip_flag {
                    IntraPredMode::PLANAR
                } else if let ModeType::MODE_IBC | ModeType::MODE_PLT = cu.pred_mode[0] {
                    IntraPredMode::DC
                } else {
                    cu.intra_pred_mode[0]
                };
            }
            _ => {}
        }
        let mut pred_mode_intra = pred_mode_intra as isize;
        // wide angle intra prediction mode mapping process (8.4.5.2.7)
        let (nw, nh) = if ectx.intra_subpartitions_split_type
            == IntraSubpartitionsSplitType::ISP_NO_SPLIT
            || c_idx != 0
        {
            (tw, th)
        } else {
            (cw, ch)
        };
        let wh_ratio = (nw.ilog2() as isize - nh.ilog2() as isize).unsigned_abs();
        if nw != nh {
            pred_mode_intra = if nw > nh
                && pred_mode_intra >= 2
                && pred_mode_intra
                    < (if wh_ratio > 1 {
                        8 + 2 * wh_ratio as isize
                    } else {
                        8
                    }) {
                pred_mode_intra + 65
            } else if nh > nw
                && pred_mode_intra < 66
                && pred_mode_intra
                    > (if wh_ratio > 1 {
                        60 - 2 * wh_ratio as isize
                    } else {
                        60
                    })
            {
                pred_mode_intra - 67
            } else {
                pred_mode_intra
            };
        }
        pred_mode_intra
    }

    pub fn transform(
        &mut self,
        tu: &mut TransformUnit,
        c_idx: usize,
        sps: &SequenceParameterSet,
        ph: &PictureHeader,
        ectx: &EncoderContext,
    ) {
        let tu_c_res_mode = Self::get_tu_c_res_mode(tu);
        let coded_c_idx = Self::get_coded_c_idx(c_idx, tu_c_res_mode);
        let c_sign = 1 - 2 * (ph.joint_cbcr_sign_flag as isize);
        let (log2_tw, log2_th) = tu.get_log2_tb_size(c_idx);
        let (tw, th) = (1 << log2_tw, 1 << log2_th);
        let res = if c_idx == coded_c_idx {
            tu.residuals[c_idx].clone()
        } else if tu_c_res_mode == 2 {
            if c_sign == 1 {
                tu.residuals[c_idx].clone()
            } else {
                let mut v = vec2d![0i16; th; tw];
                for y in 0..th {
                    let vy = &mut v[y];
                    let r = &tu.residuals[c_idx][y];
                    for x in 0..tw {
                        vy[x] = -r[x];
                    }
                }
                v
            }
        } else {
            let mut v = vec2d![0i16; th; tw];
            if c_sign == 1 {
                for y in 0..th {
                    let vy = &mut v[y];
                    let r = &tu.residuals[c_idx][y];
                    for x in 0..tw {
                        vy[x] = r[x] * 2;
                    }
                }
            } else {
                for y in 0..th {
                    let vy = &mut v[y];
                    let r = &tu.residuals[c_idx][y];
                    for x in 0..tw {
                        vy[x] = -r[x] * 2;
                    }
                }
            }
            v
        };

        if tu.transform_skip_flag[c_idx] {
            tu.transformed_coeffs[c_idx] = res;
        } else {
            let cu = tu.get_cu();
            let cu = cu.lock().unwrap();
            let (tr_type_hor, tr_type_ver) = Self::get_hor_ver_tr_type(tu, &cu, c_idx, sps, ectx);
            let (non_zero_w, non_zero_h) = Self::get_non_zero_size(
                tu,
                c_idx,
                ectx.apply_lfnst_flag[c_idx],
                tr_type_hor,
                tr_type_ver,
            );
            let hor_transformed_coeffs = &mut self.buffers0;
            let ihor_transformed_coeffs = &mut self.buffers1;

            if tw == 1 {
                for y in 0..th {
                    let h = &mut hor_transformed_coeffs[y];
                    let r = &res[y];
                    for x in 0..tw {
                        h[x] = r[x] as i32;
                    }
                }
                for y in 0..th {
                    let ih = &mut ihor_transformed_coeffs[y];
                    for x in 0..tw {
                        ih[x] = hor_transformed_coeffs[x][y];
                    }
                }
            } else {
                let trans_matrix = Self::get_trans_matrix(tr_type_ver, tr_type_hor, th);
                if tr_type_hor == 0 {
                    let tx = &trans_matrix[0][6 - log2_tw];
                    if is_x86_feature_detected!("avx2") {
                        match tw {
                            4 => {
                                // TODO SIMD
                                for y in 0..th {
                                    let h = &mut hor_transformed_coeffs[y];
                                    let r = &res[y];
                                    for i in 0..non_zero_w {
                                        let t = &tx[i];
                                        h[i] =
                                            (0..4).map(|x| t[x] as i32 * r[x] as i32).sum::<i32>();
                                    }
                                }
                            }
                            8 => {
                                for y in 0..th {
                                    let h = &mut hor_transformed_coeffs[y];
                                    let r = &res[y];
                                    for i in 0..non_zero_w {
                                        let t = &tx[i];
                                        h[i] = msum_8_i16_le_i9(t, r);
                                    }
                                }
                            }
                            16 => {
                                for y in 0..th {
                                    let h = &mut hor_transformed_coeffs[y];
                                    let r = &res[y];
                                    for i in 0..non_zero_w {
                                        let t = &tx[i];
                                        h[i] = msum_16x1_i16_le_i9(&t[0..tw], &r[0..tw]);
                                    }
                                }
                            }
                            32 => {
                                for y in 0..th {
                                    let h = &mut hor_transformed_coeffs[y];
                                    let r = &res[y];
                                    for i in 0..non_zero_w {
                                        let t = &tx[i];
                                        h[i] = msum_16x2_i16_le_i9(&t[0..tw], &r[0..tw]);
                                    }
                                }
                            }
                            _ => {
                                for y in 0..th {
                                    let h = &mut hor_transformed_coeffs[y];
                                    let r = &res[y];
                                    for i in 0..non_zero_w {
                                        let t = &tx[i];
                                        h[i] = msum_16x4_i16_le_i9(&t[0..tw], &r[0..tw]);
                                    }
                                }
                            }
                        }
                    } else {
                        for y in 0..th {
                            let h = &mut hor_transformed_coeffs[y];
                            let r = &res[y];
                            for i in 0..non_zero_w {
                                let t = &tx[i];
                                h[i] = (0..tw).map(|x| t[x] as i32 * r[x] as i32).sum::<i32>();
                            }
                        }
                    }
                } else {
                    let tx = &trans_matrix[0][0];
                    for y in 0..th {
                        let h = &mut hor_transformed_coeffs[y];
                        for i in 0..non_zero_w {
                            let t = &tx[i];
                            let r = &res[y];
                            h[i] = (0..tw).map(|x| t[x] as i32 * r[x] as i32).sum::<i32>();
                        }
                    }
                }
                let shift = log2_tw - 1;
                let d = 1 << (shift - 1);
                // TODO SIMD
                for y in 0..th {
                    let h = &mut hor_transformed_coeffs[y];
                    for e in h.iter_mut().take(tw) {
                        *e = (*e + d) >> shift;
                    }
                }
                let log2_stride = hor_transformed_coeffs.log2_stride;
                let stride = 1 << log2_stride;
                for y in 0..th {
                    let ih = &mut ihor_transformed_coeffs[y];
                    let mut h = &mut hor_transformed_coeffs.data[y..];
                    ih[0] = h[0];
                    for e in ih.iter_mut().take(tw).skip(1) {
                        h = &mut h[stride..];
                        *e = h[0];
                    }
                }
            }

            let transformed_coeffs = &mut self.buffers2;
            if th == 1 {
                for y in 0..th {
                    let t = &mut transformed_coeffs[y];
                    let h = &hor_transformed_coeffs[y];
                    t[..tw].copy_from_slice(&h[..tw]);
                }
            } else {
                let trans_matrix = Self::get_trans_matrix(tr_type_hor, tr_type_ver, tw);
                if tr_type_ver == 0 {
                    let tx = &trans_matrix[0][6 - log2_th];
                    if is_x86_feature_detected!("avx2") {
                        match th {
                            4 => {
                                for x in 0..non_zero_w {
                                    let ih = &ihor_transformed_coeffs[x];
                                    for i in 0..non_zero_h {
                                        let t = &tx[i];
                                        transformed_coeffs[i][x] =
                                            (0..4).map(|y| t[y] as i32 * ih[y]).sum();
                                    }
                                }
                            }
                            8 => {
                                for x in 0..non_zero_w {
                                    let ih = &ihor_transformed_coeffs[x];
                                    for i in 0..non_zero_h {
                                        let t = &tx[i];
                                        transformed_coeffs[i][x] =
                                            msum_8x1_i16_i32_le_i9_i17(&t[0..th], &ih[0..th]);
                                    }
                                }
                            }
                            16 => {
                                for x in 0..non_zero_w {
                                    let ih = &ihor_transformed_coeffs[x];
                                    for i in 0..non_zero_h {
                                        let t = &tx[i];
                                        transformed_coeffs[i][x] =
                                            msum_8x2_i16_i32_le_i9_i17(&t[0..th], &ih[0..th]);
                                    }
                                }
                            }
                            32 => {
                                for x in 0..non_zero_w {
                                    let ih = &ihor_transformed_coeffs[x];
                                    for i in 0..non_zero_h {
                                        let t = &tx[i];
                                        transformed_coeffs[i][x] =
                                            msum_8x4_i16_i32_le_i9_i17(&t[0..th], &ih[0..th]);
                                    }
                                }
                            }
                            _ => {
                                for x in 0..non_zero_w {
                                    let ih = &ihor_transformed_coeffs[x];
                                    for i in 0..non_zero_h {
                                        let t = &tx[i];
                                        transformed_coeffs[i][x] =
                                            msum_8x8_i16_i32_le_i9_i17(&t[0..th], &ih[0..th]);
                                    }
                                }
                            }
                        }
                    } else {
                        for x in 0..non_zero_w {
                            let ih = &ihor_transformed_coeffs[x];
                            for i in 0..non_zero_h {
                                let t = &tx[i];
                                transformed_coeffs[i][x] =
                                    (0..th).map(|y| t[y] as i32 * ih[y]).sum();
                            }
                        }
                    }
                } else {
                    for i in 0..non_zero_h {
                        let tx = &trans_matrix[0][0][i];
                        for y in 0..th {
                            let h = &hor_transformed_coeffs[y];
                            let t = &mut transformed_coeffs[y];
                            for x in 0..non_zero_w {
                                t[x] += tx[y] as i32 * h[x];
                            }
                        }
                    }
                }
                for y in 0..th {
                    let t = &mut transformed_coeffs[y];
                    let shift = log2_th + 6;
                    let d = 1 << (shift - 1);
                    for e in t.iter_mut().take(tw) {
                        *e = (*e + d) >> shift;
                    }
                }
            }

            if ectx.apply_lfnst_flag[c_idx] && !tu.transform_skip_flag[c_idx] {
                let n_lfnst_out_size = if tw >= 8 && th >= 8 { 48 } else { 16 };
                let log2_lfnst_size = if tw >= 8 && th >= 8 { 3 } else { 2 };
                let n_lfnst_size = 1 << log2_lfnst_size;
                let non_zero_size = if (tw == 4 && th == 4) || (tw == 8 && th == 8) {
                    8
                } else {
                    16
                };
                let mut v = vec![0; non_zero_size];
                let n_tr_s = n_lfnst_out_size;
                let pred_mode_intra = Self::derive_pred_mode_intra(tu, &cu, c_idx, ectx);
                let low_freq_trans_matrix =
                    Self::get_low_freq_trans_matrix(n_tr_s, pred_mode_intra, cu.lfnst_idx);
                if pred_mode_intra <= 34 {
                    for y in 0..n_lfnst_size {
                        for x in 0..n_lfnst_size {
                            if y < 4 {
                                v[x + (y << log2_lfnst_size)] = transformed_coeffs[y][x];
                            } else if x < 4 {
                                v[32 + x + ((y - 4) << 2)] = transformed_coeffs[y][x];
                            }
                        }
                    }
                } else {
                    for y in 0..n_lfnst_size {
                        for x in 0..n_lfnst_size {
                            if x < 4 {
                                v[y + (x << log2_lfnst_size)] = transformed_coeffs[y][x];
                            } else if y < 4 {
                                v[32 + y + ((x - 4) << 2)] = transformed_coeffs[y][x];
                            }
                        }
                    }
                }
                tu.transformed_coeffs[c_idx] = vec2d![0; th; tw];
                let mut u = vec![0; non_zero_size];
                for i in 0..n_tr_s {
                    let mut sum = 0;
                    for (lftm, e) in zip(low_freq_trans_matrix[i].iter().take(v.len()), v.iter()) {
                        sum += *lftm as i32 * e;
                    }
                    u[i] = (sum + 64) >> 7;
                }
                let order = &DIAG_SCAN_ORDER[2][2][..non_zero_size];
                for ((x_c, y_c), e) in zip(order.iter(), &u) {
                    tu.transformed_coeffs[c_idx][*y_c][*x_c] = *e as i16;
                }
            } else {
                // TODO SIMD
                for y in 0..th {
                    let ttc = &mut tu.transformed_coeffs[c_idx][y];
                    let tc = &transformed_coeffs[y];
                    for x in 0..tw {
                        ttc[x] = tc[x] as i16;
                    }
                }
            }
        }
    }

    pub fn inverse_transform(
        &mut self,
        tu: &mut TransformUnit,
        c_idx: usize,
        sps: &SequenceParameterSet,
        ph: &PictureHeader,
        ectx: &EncoderContext,
    ) {
        let (log2_tw, log2_th) = tu.get_log2_tb_size(c_idx);
        let (tw, th) = (1 << log2_tw, 1 << log2_th);
        let mut res = vec2d![0i16; th; tw];
        if tu.transform_skip_flag[c_idx] {
            res = tu.quantized_transformed_coeffs[c_idx].clone();
        } else {
            // transformation process for scaled transform coefficients (8.7.4.1)
            // TODO
            let cu = tu.get_cu();
            let cu = cu.lock().unwrap();
            let pred_mode_intra = Self::derive_pred_mode_intra(tu, &cu, c_idx, ectx);
            let mut deq_transformed_coeffs = tu.dequantized_transformed_coeffs[c_idx].clone();
            let mut ideq_transformed_coeffs = vec2d![0i16; th; tw];
            // TODO stride
            for y in 0..th {
                let id = &mut ideq_transformed_coeffs[y];
                for x in 0..tw {
                    id[x] = deq_transformed_coeffs[x][y];
                }
            }
            let coeff_min = -((1i32) << 15);
            let coeff_max = ((1i32) << 15) - 1;
            if ectx.apply_lfnst_flag[c_idx] && !tu.transform_skip_flag[c_idx] {
                let n_lfnst_out_size = if tw >= 8 && th >= 8 { 48 } else { 16 };
                let log2_lfnst_size = if tw >= 8 && th >= 8 { 3 } else { 2 };
                let n_lfnst_size = 1 << log2_lfnst_size;
                let non_zero_size = if (tw == 4 && th == 4) || (tw == 8 && th == 8) {
                    8
                } else {
                    16
                };
                let mut u = vec![0i32; non_zero_size];
                let t = &tu.transformed_coeffs[c_idx];
                let order = &DIAG_SCAN_ORDER[2][2];
                for x in 0..non_zero_size {
                    let (x_c, y_c) = order[x];
                    u[x] = t[y_c][x_c] as i32;
                }
                // one-dimensional low frequency non-separable transformation process (8.7.4.2)
                let mut v = vec![0i32; non_zero_size];
                let n_tr_s = n_lfnst_out_size;
                // low frequency non-separable transformation matrix derivation process (8.7.4.3)
                let low_freq_trans_matrix =
                    Self::get_low_freq_trans_matrix(n_tr_s, pred_mode_intra, cu.lfnst_idx);
                for i in 0..n_tr_s {
                    let mut sum = 0;
                    let lftm = &low_freq_trans_matrix[i];
                    for (s, t) in zip(lftm.iter().take(non_zero_size), &u) {
                        sum += *s as i32 * t;
                    }
                    v[i] = ((sum + 64) >> 7).clamp(coeff_min, coeff_max);
                }
                if pred_mode_intra <= 34 {
                    for y in 0..n_lfnst_size {
                        let d = &mut deq_transformed_coeffs[y];
                        for x in 0..n_lfnst_size {
                            d[x] = if y < 4 {
                                v[x + (y << log2_lfnst_size)] as i16
                            } else if x < 4 {
                                v[32 + x + ((y - 4) << 2)] as i16
                            } else {
                                d[x]
                            };
                            ideq_transformed_coeffs[x][y] = d[x];
                        }
                    }
                } else {
                    for y in 0..n_lfnst_size {
                        let d = &mut deq_transformed_coeffs[y];
                        for x in 0..n_lfnst_size {
                            d[x] = if x < 4 {
                                v[y + (x << log2_lfnst_size)] as i16
                            } else if y < 4 {
                                v[32 + y + ((x - 4) << 2)] as i16
                            } else {
                                d[x]
                            };
                            ideq_transformed_coeffs[x][y] = d[x];
                        }
                    }
                }
            }

            let (tr_type_hor, tr_type_ver) = Self::get_hor_ver_tr_type(tu, &cu, c_idx, sps, ectx);
            let (non_zero_w, non_zero_h) = Self::get_non_zero_size(
                tu,
                c_idx,
                ectx.apply_lfnst_flag[c_idx],
                tr_type_hor,
                tr_type_ver,
            );
            let ver_itransformed_coeffs = &mut self.buffers0;
            if th > 1 {
                // transformation process (8.7.4.4)
                let trans_matrix = Self::get_trans_matrix(tr_type_hor, tr_type_ver, th);
                if tr_type_ver == 0 {
                    let shift = 6 - log2_th;
                    let tx = &trans_matrix[1][shift];
                    if is_x86_feature_detected!("avx2") {
                        match non_zero_h {
                            4 => {
                                // TODO SIMD
                                for x in 0..non_zero_w {
                                    let id = &ideq_transformed_coeffs[x];
                                    for y in 0..th {
                                        let t = &tx[y];
                                        ver_itransformed_coeffs[y][x] =
                                            (0..4).map(|i| t[i] as i32 * id[i] as i32).sum::<i32>();
                                    }
                                }
                            }
                            8 => {
                                for x in 0..non_zero_w {
                                    let id = &ideq_transformed_coeffs[x];
                                    for y in 0..th {
                                        let t = &tx[y];
                                        ver_itransformed_coeffs[y][x] = msum_8_i16_le_i9(t, id);
                                    }
                                }
                            }
                            16 => {
                                for x in 0..non_zero_w {
                                    let id = &ideq_transformed_coeffs[x];
                                    for y in 0..th {
                                        let t = &tx[y];
                                        ver_itransformed_coeffs[y][x] = msum_16x1_i16_le_i9(
                                            &t[0..non_zero_h],
                                            &id[0..non_zero_h],
                                        );
                                    }
                                }
                            }
                            32 => {
                                for x in 0..non_zero_w {
                                    let id = &ideq_transformed_coeffs[x];
                                    for y in 0..th {
                                        let t = &tx[y];
                                        ver_itransformed_coeffs[y][x] = msum_16x2_i16_le_i9(
                                            &t[0..non_zero_h],
                                            &id[0..non_zero_h],
                                        );
                                    }
                                }
                            }
                            _ => {
                                for x in 0..non_zero_w {
                                    let id = &ideq_transformed_coeffs[x];
                                    for y in 0..th {
                                        let t = &tx[y];
                                        ver_itransformed_coeffs[y][x] = msum_16x4_i16_le_i9(
                                            &t[0..non_zero_h],
                                            &id[0..non_zero_h],
                                        );
                                    }
                                }
                            }
                        }
                    } else {
                        for x in 0..non_zero_w {
                            let id = &ideq_transformed_coeffs[x];
                            for y in 0..th {
                                let t = &tx[y];
                                ver_itransformed_coeffs[y][x] = (0..non_zero_h)
                                    .map(|i| t[i] as i32 * id[i] as i32)
                                    .sum::<i32>();
                            }
                        }
                    }
                } else {
                    let tx = &trans_matrix[1][0];
                    for x in 0..non_zero_w {
                        let id = &ideq_transformed_coeffs[x];
                        for y in 0..th {
                            let t = &tx[y];
                            ver_itransformed_coeffs[y][x] = (0..non_zero_h)
                                .map(|i| t[i] as i32 * id[i] as i32)
                                .sum::<i32>();
                        }
                    }
                }
            }
            if th > 1 && tw > 1 {
                // TODO SIMD
                for y in 0..th {
                    let v = &mut ver_itransformed_coeffs[y][..non_zero_w];
                    for col in v.iter_mut() {
                        *col = ((*col + 64) >> 7).clamp(coeff_min, coeff_max);
                    }
                    //for x in 0..non_zero_w {
                    //v[x] = ((v[x] + 64) >> 7).clamp(coeff_min, coeff_max);
                    //}
                }
            }
            if th == 1 {
                for y in 0..th {
                    let v = &mut ver_itransformed_coeffs[y];
                    let dtc = &deq_transformed_coeffs[y];
                    for x in 0..tw {
                        v[x] = dtc[x] as i32;
                    }
                }
            }

            let mut itransformed_coeffs = &mut self.buffers1;
            if tw > 1 {
                // transformation process (8.7.4.4)
                let trans_matrix = Self::get_trans_matrix(tr_type_ver, tr_type_hor, tw);
                if tr_type_hor == 0 {
                    let shift = 6 - log2_tw;
                    let tx = &trans_matrix[1][shift];
                    if is_x86_feature_detected!("avx2") {
                        match non_zero_w {
                            4 => {
                                for y in 0..th {
                                    let v = &ver_itransformed_coeffs[y];
                                    let it = &mut itransformed_coeffs[y];
                                    for x in 0..tw {
                                        let t = &tx[x];
                                        it[x] = (0..4).map(|i| t[i] as i32 * v[i]).sum::<i32>();
                                    }
                                }
                            }
                            8 => {
                                for y in 0..th {
                                    let v = &ver_itransformed_coeffs[y];
                                    let it = &mut itransformed_coeffs[y];
                                    for x in 0..tw {
                                        let t = &tx[x];
                                        it[x] = msum_8x1_i16_i32_le_i9_i17(
                                            &t[0..non_zero_w],
                                            &v[0..non_zero_w],
                                        );
                                    }
                                }
                            }
                            16 => {
                                for y in 0..th {
                                    let v = &ver_itransformed_coeffs[y];
                                    let it = &mut itransformed_coeffs[y];
                                    for x in 0..tw {
                                        let t = &tx[x];
                                        it[x] = msum_8x2_i16_i32_le_i9_i17(
                                            &t[0..non_zero_w],
                                            &v[0..non_zero_w],
                                        );
                                    }
                                }
                            }
                            32 => {
                                for y in 0..th {
                                    let v = &ver_itransformed_coeffs[y];
                                    let it = &mut itransformed_coeffs[y];
                                    for x in 0..tw {
                                        let t = &tx[x];
                                        it[x] = msum_8x4_i16_i32_le_i9_i17(
                                            &t[0..non_zero_w],
                                            &v[0..non_zero_w],
                                        );
                                    }
                                }
                            }
                            _ => {
                                for y in 0..th {
                                    let v = &ver_itransformed_coeffs[y];
                                    let it = &mut itransformed_coeffs[y];
                                    for x in 0..tw {
                                        let t = &tx[x];
                                        it[x] = msum_8x8_i16_i32_le_i9_i17(
                                            &t[0..non_zero_w],
                                            &v[0..non_zero_w],
                                        );
                                    }
                                }
                            }
                        }
                    } else {
                        for y in 0..th {
                            let v = &ver_itransformed_coeffs[y];
                            let it = &mut itransformed_coeffs[y];
                            for x in 0..tw {
                                let t = &tx[x];
                                it[x] = (0..non_zero_w).map(|i| t[i] as i32 * v[i]).sum::<i32>();
                            }
                        }
                    }
                } else {
                    let tx = &trans_matrix[1][0];
                    for y in 0..th {
                        let it = &mut itransformed_coeffs[y];
                        for x in 0..tw {
                            let t = &tx[x];
                            let v = &ver_itransformed_coeffs[y];
                            it[x] = (0..non_zero_w).map(|i| t[i] as i32 * v[i]).sum::<i32>();
                        }
                    }
                }
            } else {
                itransformed_coeffs = ver_itransformed_coeffs;
            }
            let bd_shift = if th > 1 && tw > 1 {
                20 - ectx.bit_depth
            } else {
                21 - ectx.bit_depth
            };
            let d = 1 << (bd_shift - 1);
            // TODO SIMD
            for y in 0..th {
                let r = &mut res[y];
                let it = &itransformed_coeffs[y];
                for x in 0..tw {
                    r[x] = ((it[x] + d) >> bd_shift) as i16;
                }
            }
        }

        let tu_c_res_mode = Self::get_tu_c_res_mode(tu);
        let coded_c_idx = Self::get_coded_c_idx(c_idx, tu_c_res_mode);
        let c_sign = 1 - 2 * (ph.joint_cbcr_sign_flag as i16);
        if c_idx == coded_c_idx {
            tu.itransformed_coeffs[c_idx] = res;
        } else if tu_c_res_mode == 2 {
            if c_sign == 1 {
                tu.itransformed_coeffs[c_idx] = res;
            } else {
                for y in 0..th {
                    let it = &mut tu.itransformed_coeffs[c_idx][y];
                    let r = &res[y];
                    for x in 0..tw {
                        it[x] = -r[x];
                    }
                }
            }
        } else if c_sign == 1 {
            for y in 0..th {
                let it = &mut tu.itransformed_coeffs[c_idx][y];
                let r = &res[y];
                for x in 0..tw {
                    it[x] = r[x] >> 1;
                }
            }
        } else {
            for y in 0..th {
                let it = &mut tu.itransformed_coeffs[c_idx][y];
                let r = &res[y];
                for x in 0..tw {
                    it[x] = (-r[x]) >> 1;
                }
            }
        }
    }
}
